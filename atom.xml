<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>개인 저장소</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-22T14:12:10.374Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2021/07/22/%EC%97%98%EB%A0%88%EA%B0%95%ED%8A%B8%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%201-2/"/>
    <id>http://yoursite.com/2021/07/22/%EC%97%98%EB%A0%88%EA%B0%95%ED%8A%B8%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%201-2/</id>
    <published>2021-07-22T14:06:59.530Z</published>
    <updated>2021-07-22T14:12:10.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="엘레강트-오브젝트"><a href="#엘레강트-오브젝트" class="headerlink" title="엘레강트 오브젝트"></a>엘레강트 오브젝트</h1><h3 id="새로운-관점에서-바라본-객체지향"><a href="#새로운-관점에서-바라본-객체지향" class="headerlink" title="새로운 관점에서 바라본 객체지향"></a>새로운 관점에서 바라본 객체지향</h3><h4 id="Yegor-Bugayenko-조영호-역"><a href="#Yegor-Bugayenko-조영호-역" class="headerlink" title="Yegor Bugayenko | 조영호 역"></a>Yegor Bugayenko | 조영호 역</h4><h2 id="1장-출생"><a href="#1장-출생" class="headerlink" title="1장 출생"></a>1장 출생</h2><h3 id="1-2-생성자-하나를-주-생성자로-만드세요"><a href="#1-2-생성자-하나를-주-생성자로-만드세요" class="headerlink" title="1.2 생성자 하나를 주 생성자로 만드세요"></a>1.2 생성자 하나를 주 생성자로 만드세요</h3><p>생성자는 새로웅 객체에 대한 진입점.<br>저자는 생성자의 수가 메서드의 수보다 더 많아지는 것을 추천<br>저자는 객체에 2<del>3개의 메서드와 5</del>10개의 셍성자를 포함하는게 적당 하다고 함. (근거는 없으며 임의로 정했을 뿐….;;)<br><strong>핵심은 응집도가 높고 견고한 클레스에는 적은 수의 메서드와 상대적으로 더 많은 수의 생성자가 존재</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;엘레강트-오브젝트&quot;&gt;&lt;a href=&quot;#엘레강트-오브젝트&quot; class=&quot;headerlink&quot; title=&quot;엘레강트 오브젝트&quot;&gt;&lt;/a&gt;엘레강트 오브젝트&lt;/h1&gt;&lt;h3 id=&quot;새로운-관점에서-바라본-객체지향&quot;&gt;&lt;a href=&quot;#새로운-관점에서
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>엘레강트 오브젝트 1-1</title>
    <link href="http://yoursite.com/2021/07/21/%EC%97%98%EB%A0%88%EA%B0%95%ED%8A%B8%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%201-1/"/>
    <id>http://yoursite.com/2021/07/21/%EC%97%98%EB%A0%88%EA%B0%95%ED%8A%B8%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%201-1/</id>
    <published>2021-07-21T13:39:19.733Z</published>
    <updated>2021-07-21T14:22:12.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="엘레강트-오브젝트"><a href="#엘레강트-오브젝트" class="headerlink" title="엘레강트 오브젝트"></a>엘레강트 오브젝트</h1><h3 id="새로운-관점에서-바라본-객체지향"><a href="#새로운-관점에서-바라본-객체지향" class="headerlink" title="새로운 관점에서 바라본 객체지향"></a>새로운 관점에서 바라본 객체지향</h3><h4 id="Yegor-Bugayenko-조영호-역"><a href="#Yegor-Bugayenko-조영호-역" class="headerlink" title="Yegor Bugayenko | 조영호 역"></a>Yegor Bugayenko | 조영호 역</h4><p>회사 동료가 추천해 준 책으로 책이 얇고(183p) 흥미로운 주제라서 읽게 되었다.<br>책을 읽으면서 요약내용을 해당 블로그에 작성할 예정으로,<br>한번 훑듯이 읽어봤을때는 제가 기존에 가지고있던 개념과 상당히 충돌되는 부분이 많아서 어떤면에서는 흥미로웠고 어떤면에서는 불쾌하기까지 (작가가 상당히 강경함) 하면서 읽었지만, 세상에 틀린의견은 없고 다른의견만 존재한다는 나름 제 가치관에 따라 즐겁게 읽고 요약내용을 남겨본다.</p><h2 id="1장-출생"><a href="#1장-출생" class="headerlink" title="1장 출생"></a>1장 출생</h2><h3 id="1-1-er로-끝나는-이름을-사용하지-마세요"><a href="#1-1-er로-끝나는-이름을-사용하지-마세요" class="headerlink" title="1.1 -er로 끝나는 이름을 사용하지 마세요"></a>1.1 -er로 끝나는 이름을 사용하지 마세요</h3><p>Java에서 제공하는 new 연산자가 충분히 강력하지 않음.<br>new 연산자로 할 수 있는 유일한 작업은 객체의 인스턴스를 생성하는 것일 뿐,<br>유사한 객체가 이미 존재하거나 재사용 가능한 지를 확인하지도 않으며,<br>new 가 동작하는 방식을 변경할 수 있는 어떤 매개 변수도 제공하지 않음</p><p>팩토리 패턴은 new 연산자를 대신해서 사용할 수 있는 더 강력한 옵션이기는 하지만,<br>개념적으로 팩토리 패턴과 new 연산자는 동일.<br>Java에서 팩토리 패턴은 new 연산자를 확장한 것 처럼 동작.<br>new연산자가 실행되기 전에 부가적인 로직을 더 할 수 있기 때문에, 좀더 유연하고 강력하게 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shapes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">make</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"circle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"retangle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>팩토리에서도 객체를 생성하는 최종 단계에서는 여전히 new 연산자를 사용함.<br>핵심은 개념상 팩토리 패턴과 new 연산자가 크게 다르지 않다는점.<br>클래스는 필요할 때 객체를 꺼낼 수 있고,<br>더 이상 필요하지 않은 객체를 반환 할 수 있는 객체의 웨어하우스로 클래스를 바라보는것을 추천</p><blockquote><p>클래스 = 객체의 팩토리</p></blockquote><p>클래스를 객체의 능동적인 관리자로 생각해야 한다는 것,<br>클래스는 객체를 꺼내거나 반환할 수 있는 위치이기 때문에,<br>클래스를 저장소 또는 웨어하우스라고 불러야 함</p><p>클래스의 네이밍방법에 대해 클래스의 객체들이 무엇을 하고있는(doing)지를 살펴본 후 기능(functionality)에 기반해서 이름을 짓는방법은 잘못된 방법.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashFormatter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dollars;</span><br><span class="line">    CashFormatter(<span class="keyword">int</span> dlr) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dollars = dlr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"$ %d"</span>, <span class="keyword">this</span>.dollars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런식의 네이밍 원칙은 아주 잘못된 방식이지만 매우 인기가 많음<br>클래스의 이름은 객체가 노출하고 있는 기능에 기반해서는 안됨.<br><strong>클래스의 이름은 무엇을 하는지가 아닌 무엇인지에 기반해야함</strong><br>다음 예제와 같이</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cash</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dollars;</span><br><span class="line">    Cash(<span class="keyword">int</span> dlr) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dollarws = dlr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">usd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"$ %d"</span>, <span class="keyword">this</span>.dollars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>객체는 그의 역량(capability)으로 특징지어져야함.<br>제가 어떤 사람인지는 키, 몸무게, 피부색과 같은 속성(attribute)이 아니라, 제가 할 수 있는일(what I can do)로 설명해야함.</p><p><strong>여기에 숨어있는 악마는 바로 접미사 ‘-er’</strong><br>‘-er’로 끝나는 이름을 가진 수많은 클래스가 존재함 Manager, Controller, Helper, Handler, Writer, Reader, Converter, Validator, Router, Dispatcher, Observer, Listener, Sorter, Encoder, Decoder …</p><p>객체는 객체의 외부 세계와 내부 세계를 이어주는 연결장치가 아님.<br>객체는 내부에 캡슐화된 데이터를 다루기 위해 요청 할 수 있는 절차의 집합이 아님.<br><strong>객체는 캡슐화된 데이터의 대표자(representative)</strong></p><p>그렇다면 올바른 클래스의 이름은 어떻게 지어야 할까?</p><p>클래스의 객체들이 무엇을 캡슐화 할 것이지,<br>이 요소들에 붙일 적합한 이름을 찾아야 함.<br>예를들어 임의의 숫자 리스트가 존재할 때, 이 리스트의 요소 중에서 소수를 찾는 알고리즘을 만단다는 가정 하<br>오직 소수만으로 구성된 리스트를 얻는 것이 목적이라면,<br>Primer, PrimeFinder, PrimeChooser, PrimeHelper 등으로 지으면 안됨.<br>PrimeNumbers라고 지어야함.</p><p>요약하면,<br>클래스의 이름을 붙일 때는 <strong>무엇을 하는지(what he does)</strong> 가 아닌 <strong>무엇인지(what he is)</strong>를 생각해야함.<br>내가 무성슬 하느지와 내가 누군지는 다르다.</p><blockquote><p><a href="https://www.yegor256.com/2015/03/09/objects-end-with-er.html" target="_blank" rel="noopener">https://www.yegor256.com/2015/03/09/objects-end-with-er.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;엘레강트-오브젝트&quot;&gt;&lt;a href=&quot;#엘레강트-오브젝트&quot; class=&quot;headerlink&quot; title=&quot;엘레강트 오브젝트&quot;&gt;&lt;/a&gt;엘레강트 오브젝트&lt;/h1&gt;&lt;h3 id=&quot;새로운-관점에서-바라본-객체지향&quot;&gt;&lt;a href=&quot;#새로운-관점에서
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Rest Doc</title>
    <link href="http://yoursite.com/2020/09/24/Spring%20Rest%20Doc/"/>
    <id>http://yoursite.com/2020/09/24/Spring%20Rest%20Doc/</id>
    <published>2020-09-24T13:25:07.425Z</published>
    <updated>2020-09-24T14:09:13.435Z</updated>
    
    <content type="html"><![CDATA[<p>최근에 진행했던 프로젝트는 API문서화를 Swagger를 통해서 진행했었다.<br>Swagger를 사용하면서 Code에 덕지덕지 Annotation을 붙여나가니 코드가 너무 더러워(?) 보이기도 하고<br>중간중간 수정되는 부분에 대해 기민하게 대처가 되지 않았다.<br>그러던 와중 DS가 Spring Rest Doc에 대한 정보를 줘서 공부하면서 정리해 본다.</p><p>포스팅에 작성된 코드는 <a href="https://github.com/thinkub/spring-rest-doc/" target="_blank" rel="noopener">https://github.com/thinkub/spring-rest-doc/</a> 를 참고</p><h1 id="Spring-Rest-Doc"><a href="#Spring-Rest-Doc" class="headerlink" title="Spring Rest Doc"></a>Spring Rest Doc</h1><p>공식 문서에서 소개된 내용을 번역하면 아래와 같다.</p><blockquote><p>Spring Rest Doc은 작성 서비스에 대한 정확하고 읽기 쉬운 문서를 작성하는 데 있다. Spring REST Docs는 기본적으로 Asciidoctor를 사용한다. Asciidoctor는 일반 텍스트를 처리하고 HTML을 생산하며, 필요에 맞게 스타일링하고 배치한다. 원하는 경우 Markdown을 사용하도록 Spring REST 문서를 구성할 수도 있다.<br>Spring REST Docs는 Spring MVC의 테스트 프레임워크, Spring WebFlux의 WebTestClient 또는 REST Assured으로 작성된 테스트에 의해 생산된 스니펫을 사용한다. 이러한 테스트 기반 접근 방식은 서비스 설명서의 정확성을 보장하는 데 도움이 된다. 코드 조각이 틀리면 이를 생성하는 테스트가 실패한다.</p></blockquote><p>간단하게 말해 Test Code기반으로 API문서를 생성해준다.<br>그렇기 때문에 Controller Layer에서의 테스트 코드는 필수 적으로 작성이 되어야 하며 통과가 되어야 한다. </p><h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Java 8 이상</li><li>Spring Framework 5 (5.0.2 or later)</li></ul><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.3.4.RELEASE'</span></span><br><span class="line">    id <span class="string">'io.spring.dependency-management'</span> version <span class="string">'1.0.10.RELEASE'</span></span><br><span class="line">    id <span class="string">'org.asciidoctor.convert'</span> version <span class="string">'1.5.9.2'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> = <span class="string">'com.ming'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">        extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    set(<span class="string">'snippetsDir'</span>, <span class="keyword">file</span>(<span class="string">"build/generated-snippets"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    runtimeOnly <span class="string">'com.h2database:h2'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    testImplementation(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>) &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'org.junit.vintage'</span>, module: <span class="string">'junit-vintage-engine'</span></span><br><span class="line">    &#125;</span><br><span class="line">    testImplementation <span class="string">'org.springframework.restdocs:spring-restdocs-mockmvc'</span></span><br><span class="line">    testImplementation <span class="string">"org.junit.jupiter:junit-jupiter-api"</span></span><br><span class="line">    testImplementation <span class="string">"org.junit.jupiter:junit-jupiter-params"</span></span><br><span class="line">    testRuntimeOnly <span class="string">"org.junit.jupiter:junit-jupiter-engine"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    outputs.dir snippetsDir</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asciidoctor &#123;</span><br><span class="line">    inputs.dir snippetsDir</span><br><span class="line">    dependsOn test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asciidoctor.<span class="keyword">doFirst</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">file</span>(<span class="string">'src/main/resources/static/docs'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> copyDocument(type: <span class="keyword">Copy</span>) &#123;</span><br><span class="line">    dependsOn asciidoctor</span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">file</span>(<span class="string">"build/asciidoc/html5"</span>)</span><br><span class="line">    <span class="keyword">into</span> <span class="keyword">file</span>(<span class="string">"src/main/resources/static/docs"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build &#123;</span><br><span class="line">    dependsOn copyDocument</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootJar &#123;</span><br><span class="line">    dependsOn asciidoctor</span><br><span class="line">    <span class="keyword">from</span> (<span class="string">"$&#123;asciidoctor.outputDir&#125;/html5"</span>) &#123;</span><br><span class="line">        <span class="keyword">into</span> <span class="string">'static/docs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sample-User-Api"><a href="#Sample-User-Api" class="headerlink" title="Sample User Api"></a>Sample User Api</h3><h4 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;userSeq&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">findUser</span><span class="params">(@PathVariable Long userSeq)</span> </span>&#123;</span><br><span class="line">        User user = userService.findUserByUserSeq(userSeq);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">createUser</span><span class="params">(@RequestBody User.Create createUser)</span> </span>&#123;</span><br><span class="line">        User user = userService.createUser(createUser);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;userSeq&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">modifyUser</span><span class="params">(@PathVariable Long userSeq, @RequestBody User.Modify modify)</span> </span>&#123;</span><br><span class="line">        User user = userService.modifyUser(userSeq, modify);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;userSeq&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">deleteUser</span><span class="params">(@PathVariable Long userSeq)</span> </span>&#123;</span><br><span class="line">        userService.deleteUser(userSeq);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserController-Test-Code"><a href="#UserController-Test-Code" class="headerlink" title="UserController Test Code"></a>UserController Test Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(&#123;RestDocumentationExtension<span class="class">.<span class="keyword">class</span>, <span class="title">SpringExtension</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">UserController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureRestDocs</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        given(userService.findUserByUserSeq(<span class="number">1L</span>)).willReturn(User.of(<span class="number">1L</span>, <span class="string">"thinkub"</span>, <span class="string">"Ming"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        ResultActions resultActions = mockMvc.perform(RestDocumentationRequestBuilders.get(<span class="string">"/user/&#123;userSeq&#125;"</span>, <span class="number">1L</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_VALUE))</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        resultActions.andExpect(status().isOk())</span><br><span class="line">                .andDo(document(</span><br><span class="line">                        <span class="string">"findUser"</span>,</span><br><span class="line">                        getDocumentRequest(),</span><br><span class="line">                        getDocumentResponse(),</span><br><span class="line">                        pathParameters(parameterWithName(<span class="string">"userSeq"</span>).description(<span class="string">"사용자 시퀀스"</span>)),</span><br><span class="line">                        responseFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"userSeq"</span>).type(JsonFieldType.NUMBER).description(<span class="string">"사용자 시퀀스"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userId"</span>).type(JsonFieldType.STRING).description(<span class="string">"아이디"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userName"</span>).type(JsonFieldType.STRING).description(<span class="string">"이름"</span>)</span><br><span class="line">                        )</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        User.Create create = User.Create.of(<span class="string">"thinkub"</span>, <span class="string">"Ming"</span>);</span><br><span class="line">        given(userService.createUser(any())).willReturn(User.of(<span class="number">1L</span>, <span class="string">"thinkub"</span>, <span class="string">"Ming"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        ResultActions resultActions = mockMvc.perform(RestDocumentationRequestBuilders.post(<span class="string">"/user"</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">                .content(objectMapper.writeValueAsString(create)))</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        resultActions.andExpect(status().isOk())</span><br><span class="line">                .andDo(document(</span><br><span class="line">                        <span class="string">"createUser"</span>,</span><br><span class="line">                        getDocumentRequest(),</span><br><span class="line">                        getDocumentResponse(),</span><br><span class="line">                        requestFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"userId"</span>).type(JsonFieldType.STRING).description(<span class="string">"아이디"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userName"</span>).type(JsonFieldType.STRING).description(<span class="string">"이름"</span>).optional()</span><br><span class="line">                        ),</span><br><span class="line">                        responseFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"userSeq"</span>).type(JsonFieldType.NUMBER).description(<span class="string">"사용자 시퀀스"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userId"</span>).type(JsonFieldType.STRING).description(<span class="string">"아이디"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userName"</span>).type(JsonFieldType.STRING).description(<span class="string">"이름"</span>)</span><br><span class="line">                        )</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modifyUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        User.Modify modify = User.Modify.of(<span class="string">"thinkub-new"</span>, <span class="string">"Ming-new"</span>);</span><br><span class="line">        User user = User.of(<span class="number">1L</span>, <span class="string">"thinkub-new"</span>, <span class="string">"Ming-new"</span>);</span><br><span class="line">        given(userService.modifyUser(eq(<span class="number">1L</span>), any())).willReturn(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        ResultActions resultActions = mockMvc.perform(RestDocumentationRequestBuilders.put(<span class="string">"/user/&#123;userSeq&#125;"</span>, <span class="number">1L</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(modify)))</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        resultActions.andExpect(status().isOk())</span><br><span class="line">                .andDo(document(</span><br><span class="line">                        <span class="string">"modifyUser"</span>,</span><br><span class="line">                        getDocumentRequest(),</span><br><span class="line">                        getDocumentResponse(),</span><br><span class="line">                        pathParameters(parameterWithName(<span class="string">"userSeq"</span>).description(<span class="string">"사용자 시퀀스"</span>)),</span><br><span class="line">                        requestFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"userId"</span>).type(JsonFieldType.STRING).description(<span class="string">"아이디"</span>).optional(),</span><br><span class="line">                                fieldWithPath(<span class="string">"userName"</span>).type(JsonFieldType.STRING).description(<span class="string">"이름"</span>).optional()</span><br><span class="line">                        ),</span><br><span class="line">                        responseFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"userSeq"</span>).type(JsonFieldType.NUMBER).description(<span class="string">"사용자 시퀀스"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userId"</span>).type(JsonFieldType.STRING).description(<span class="string">"아이디"</span>),</span><br><span class="line">                                fieldWithPath(<span class="string">"userName"</span>).type(JsonFieldType.STRING).description(<span class="string">"이름"</span>)</span><br><span class="line">                        )</span><br><span class="line">                ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        doNothing().when(userService).deleteUser(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        ResultActions resultActions = mockMvc.perform(RestDocumentationRequestBuilders.delete(<span class="string">"/user/&#123;userSeq&#125;"</span>, <span class="number">1L</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_VALUE))</span><br><span class="line">                .andDo(MockMvcResultHandlers.print());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        resultActions.andExpect(status().isOk())</span><br><span class="line">                .andDo(document(</span><br><span class="line">                        <span class="string">"deleteUser"</span>,</span><br><span class="line">                        getDocumentRequest(),</span><br><span class="line">                        getDocumentResponse(),</span><br><span class="line">                        pathParameters(parameterWithName(<span class="string">"userSeq"</span>).description(<span class="string">"사용자 시퀀스"</span>))</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-restdocs/docs/current/reference/html5/" target="_blank" rel="noopener">https://docs.spring.io/spring-restdocs/docs/current/reference/html5/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근에 진행했던 프로젝트는 API문서화를 Swagger를 통해서 진행했었다.&lt;br&gt;Swagger를 사용하면서 Code에 덕지덕지 Annotation을 붙여나가니 코드가 너무 더러워(?) 보이기도 하고&lt;br&gt;중간중간 수정되는 부분에 대해 기민하게 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JPA Cascade</title>
    <link href="http://yoursite.com/2020/09/14/JPA%20Cascade/"/>
    <id>http://yoursite.com/2020/09/14/JPA%20Cascade/</id>
    <published>2020-09-14T13:58:58.991Z</published>
    <updated>2020-09-14T14:24:05.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="영속성-전의란"><a href="#영속성-전의란" class="headerlink" title="영속성 전의란?"></a>영속성 전의란?</h1><p>엔티티간 연관관계에 있는 경우, 즉 A엔티티와 B엔티티는 연관관계인 경우 A엔티티가 영속 상태일때 B엔티티도 영속 상태일까?<br>일반적으로 별도 설정을 해주지 않는다면 B엔티티는 영속상태가 아니다. 이 경우 B엔티티를 영속 상태를 만들기 위해 영속성 전이를 할 수 있다.<br>JPA는 CASCADE 옵션으로 영속성 전이 기능을 제공한다. </p><h4 id="간단한-예제"><a href="#간단한-예제" class="headerlink" title="간단한 예제"></a>간단한 예제</h4><ul><li><p>부모 엔티티</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"parent"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;Child&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>자식 엔티티</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="keyword">private</span> Parent parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>만약 부모 1명에 자식 2명을 저장한다고 할때 영속성 전이를 이용하지 않는 다면 아래와 같이 작성하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveNoCascade</span><span class="params">(EntityManager em)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 부모 저장</span></span><br><span class="line">    Parent parent = <span class="keyword">new</span> Parent();</span><br><span class="line">    em.persist(parent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1번 자식 저장</span></span><br><span class="line">    Child child1 = <span class="keyword">new</span> Child();</span><br><span class="line">    child1.setParent(parent); <span class="comment">// 자식 -&gt; 부모 연관관계설정</span></span><br><span class="line">    parent.getChildren().add(child1); <span class="comment">// 부모 -&gt; 자식</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2번 자식 저장</span></span><br><span class="line">    Child child2 = <span class="keyword">new</span> Child();</span><br><span class="line">    child2.setParent(parent); <span class="comment">// 자식 -&gt; 부모 연관관계설정</span></span><br><span class="line">    parent.getChildren().add(child2); <span class="comment">// 부모 -&gt; 자식</span></span><br><span class="line">    em.persist(child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="영속성-전이-저장"><a href="#영속성-전이-저장" class="headerlink" title="영속성 전이 - 저장"></a>영속성 전이 - 저장</h2><p>영속성 전이를 활성화 하는 CASCADE옵션을 적용 해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"parent"</span>, cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;Child&gt;();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CASCADE옵션을 지정 후 위의 저장 로직을 아래와 같이 수정 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveWithCascade</span><span class="params">(EntityManager em)</span> </span>&#123;</span><br><span class="line">    Child child1 = <span class="keyword">new</span> Child();</span><br><span class="line">    Child child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">    Parent parent = <span class="keyword">new</span> Parent();</span><br><span class="line">    child1.setParent(parent); <span class="comment">// 연관관계 추가</span></span><br><span class="line">    child2.setParent(parent); <span class="comment">// 연관관계 추가</span></span><br><span class="line">    </span><br><span class="line">    parent.getChildren().add(child1);</span><br><span class="line">    parent.getChildren().add(child1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 부모 저장, 연관된 자식들 저장</span></span><br><span class="line">    em.persist(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부모만 영속화 하면 CascadeType.PERSIST로 설정한 자식 엔티티까지 함께 영속화해서 저장한다.</p><h2 id="CASCADE-종류"><a href="#CASCADE-종류" class="headerlink" title="CASCADE 종류"></a>CASCADE 종류</h2><p>CascadeType 코드를 보면 아래와 같이 enum으로 정의되어있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CascadeType &#123; </span><br><span class="line">    <span class="comment">/** Cascade all operations - 모두 적용 */</span></span><br><span class="line">    ALL, </span><br><span class="line">    <span class="comment">/** Cascade persist operation - 영속 */</span></span><br><span class="line">    PERSIST, </span><br><span class="line">    <span class="comment">/** Cascade merge operation - 병합 */</span></span><br><span class="line">    MERGE, </span><br><span class="line">    <span class="comment">/** Cascade remove operation - 삭제 */</span></span><br><span class="line">    REMOVE,</span><br><span class="line">    <span class="comment">/** Cascade refresh operation */</span></span><br><span class="line">    REFRESH,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cascade detach operation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span>   </span><br><span class="line">    DETACH</span><br></pre></td></tr></table></figure><p>참고로 <code>CascadeType.PERSIST</code> 와 <code>CascadeType.REMOVE</code> 는 em.persist(), em.remove()를 실행할때 바로 전이가 발생하지 않고 플러시가 호출 될 때 전이가 발생한다.</p><h2 id="고아-객체"><a href="#고아-객체" class="headerlink" title="고아 객체"></a>고아 객체</h2><p>JPA는 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능을 제공하는데 이것ㄷ을 고아 객체(ORPHAN) 제거라 한다.<br>이 기능을 사용해서 부모 엔티티의 컬렉션에서 자식 엔티티의 참조만 제거하면 자식 엔티티가 자동으로 삭제되도록 설정 할 수 있다.<br>옵션중 orphanRemoval을 설정하면 고아 객체는 자동으로 삭제 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"parent"</span>, orphanRemoval = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Child&gt; children = <span class="keyword">new</span> ArrayList&lt;Child&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;영속성-전의란&quot;&gt;&lt;a href=&quot;#영속성-전의란&quot; class=&quot;headerlink&quot; title=&quot;영속성 전의란?&quot;&gt;&lt;/a&gt;영속성 전의란?&lt;/h1&gt;&lt;p&gt;엔티티간 연관관계에 있는 경우, 즉 A엔티티와 B엔티티는 연관관계인 경우 A엔티티가 영
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JPA Entity LifeCycle</title>
    <link href="http://yoursite.com/2020/09/08/JPA%20Entity%20LifeCycle/"/>
    <id>http://yoursite.com/2020/09/08/JPA%20Entity%20LifeCycle/</id>
    <published>2020-09-08T13:34:53.101Z</published>
    <updated>2020-09-09T13:34:27.887Z</updated>
    
    <content type="html"><![CDATA[<p>JPA를 이용해서 플젝을 진행하면서 구글링을 열심히 하면서 개발하다보니 뭔가 기초가 다져지지 않은 모래성 위에 집을 짓는 기분이랄까? 그런 생각이 들어서 JPA 서적을 하나 구입해서 기초부터 탄탄히 공부해보기로 했다.</p><p>책은 <a href="https://ridibooks.com/books/3984000009?_s=search&_q=jpa" target="_blank" rel="noopener">자바 ORM 표준 JPA 프로그래밍</a> 보면서 스터디를 진행했다.</p><h1 id="엔티티-생명주기"><a href="#엔티티-생명주기" class="headerlink" title="엔티티 생명주기"></a>엔티티 생명주기</h1><p>엔티티는 4가지 상태가 존재한다.</p><ul><li>비영속(new/transient): 영속성 컨텍스트와 전혀 관계가 없는 상태</li><li>영속(managed): 영속성 컨텍스트에 저장된 상태</li><li>준영속(detached): 영속성 컨텍스트에 저장되었다가 분리된 상태</li><li>삭제(removed): 삭제된 상태</li></ul><h1 id="비영속"><a href="#비영속" class="headerlink" title="비영속"></a>비영속</h1><p>엔티티 객체를 생성한 상태로 순수한 객체 상태이며 아직 저장하지 않았다. 따라서 영속성 컨텍스트나 데이터 베이스와 전혀 관련이 없는 상태</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setId(<span class="string">"thinkub"</span>);</span><br><span class="line">member.setUserName(<span class="string">"Ming"</span>);</span><br></pre></td></tr></table></figure><h1 id="영속"><a href="#영속" class="headerlink" title="영속"></a>영속</h1><p>엔티티 메니저를 통해 엔티티를 영속성 컨텍스트에 저장했다. 이렇게 영속성 컨텍스트가 관리하는 엔티티를 영속 상태라 한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.persist(member);</span><br></pre></td></tr></table></figure><h1 id="준영속"><a href="#준영속" class="headerlink" title="준영속"></a>준영속</h1><p>영속성 컨텍스트가 관리하던 영속상태의 엔티티를 영속성 컨텍스트가 관리하지 않으면 준영속 상태가 된다. 특정 엔티티를 준영속 상태로 만들려면 <code>em.detach()</code>를 호출하면 된다. <code>em.close()</code>를 호출해서 영속성 컨텍스트를 닫거나 <code>em.clear()</code>를 호출해서 영속성 컨텍스트를 초기화해도 영속성 컨텍스트가 관리하던 영속상태의 엔티티는 준영속 상태가 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.detach(member);</span><br></pre></td></tr></table></figure><h1 id="삭제"><a href="#삭제" class="headerlink" title="삭제"></a>삭제</h1><p>엔티티를 영속성 컨텍스트와 데이터 베이스에서 삭제한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.remove(member);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JPA를 이용해서 플젝을 진행하면서 구글링을 열심히 하면서 개발하다보니 뭔가 기초가 다져지지 않은 모래성 위에 집을 짓는 기분이랄까? 그런 생각이 들어서 JPA 서적을 하나 구입해서 기초부터 탄탄히 공부해보기로 했다.&lt;/p&gt;
&lt;p&gt;책은 &lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java14 Releases notes</title>
    <link href="http://yoursite.com/2020/09/07/Java14%20Releases%20notes/"/>
    <id>http://yoursite.com/2020/09/07/Java14%20Releases%20notes/</id>
    <published>2020-09-07T13:50:43.331Z</published>
    <updated>2020-09-08T13:34:20.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><ul><li><a href="https://thinkub.github.io/2020/08/26/Java10%20Releases%20notes/" target="_blank" rel="noopener">java10</a> (GA 2018/03/20)</li><li><a href="https://thinkub.github.io/2020/09/07/Java11%20Releases%20notes/" target="_blank" rel="noopener">java11</a> (GA 2018/09/25)</li><li><a href="https://thinkub.github.io/2020/09/07/Java12%20Releases%20notes/" target="_blank" rel="noopener">java12</a> (GA 2019/03/19)</li><li><a href="https://thinkub.github.io/2020/09/07/Java13%20Releases%20notes/" target="_blank" rel="noopener">java13</a> (GA 2019/09/17)</li><li><a href="https://thinkub.github.io/2020/09/07/Java14%20Releases%20notes/" target="_blank" rel="noopener">java14</a> (GA 2020/03/17)</li></ul><h2 id="JEP-305-Pattern-Matching-for-instanceof-Preview"><a href="#JEP-305-Pattern-Matching-for-instanceof-Preview" class="headerlink" title="JEP 305: Pattern Matching for instanceof (Preview)"></a><a href="https://openjdk.java.net/jeps/305" target="_blank" rel="noopener">JEP 305: Pattern Matching for instanceof (Preview)</a></h2><p>런타임 객체의 타입을 기존에는 instanceof 가 좀더 간결하고 안전하게 사용 할 수 있다.<br>아직 Preview이기 때문에 <code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.</p><p>기존엔 아래 와 같이 사용을 했다면 (캐스팅을 해야 한다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    String s = (String) obj;</span><br><span class="line">    <span class="comment">// use s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 사용 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">    <span class="comment">// can use s here</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// can't use s here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>향후 JEP는 switch표현식 및 명령문과 같은 다른 언어 구조에 대한 패턴 일치를 통해 Java 프로그래밍 언어를 향상시킬 계획이다.</p><h2 id="JEP-345-NUMA-Aware-Memory-Allocation-for-G1"><a href="#JEP-345-NUMA-Aware-Memory-Allocation-for-G1" class="headerlink" title="JEP 345: NUMA-Aware Memory Allocation for G1"></a><a href="https://openjdk.java.net/jeps/345" target="_blank" rel="noopener">JEP 345: NUMA-Aware Memory Allocation for G1</a></h2><p>NUMA(Non-Uniform Memory Access) 인식 메모리 할당을 구현하여 대형 컴퓨터에서 G1성능이 향상되었다. </p><h2 id="JEP-358-Helpful-NullPointerExceptions"><a href="#JEP-358-Helpful-NullPointerExceptions" class="headerlink" title="JEP 358: Helpful NullPointerExceptions"></a><a href="https://openjdk.java.net/jeps/358" target="_blank" rel="noopener">JEP 358: Helpful NullPointerExceptions</a></h2><p>NullPointerException정확히 어떤 변수인지 설명하여 사용성을 향상되었다.<br>예를 들어 아래와 같은코드에서 NPE가 발생하게 된다면 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.i = <span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>아래와 같은 에러 메세지를 볼 수 있다. 아래 에러 메시지로도 충분히 a가 null이라는 것 을 유추 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">    at Prog.main(Prog.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>하지만 아래와 같은 코드에서는 기존 노출되는 에러메시지 만으로는 어떤 객체에서 NPE가 발생 한지 찾기 어렵다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.b.c.i = <span class="number">99</span>;</span><br><span class="line">a[i][j][k] = <span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>Java14에서 추가된 Helpful NullPointerExceptions 을 사용한다면 좀더 세분화된 에러 메세지를 볼 수 있다. 단 사용하기 위해선 실행 옵션에 <code>-XX:+ShowCodeDetailsInExceptionMessages</code> 를 넣어줘야 한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException: </span><br><span class="line">        Cannot assign field <span class="string">"i"</span> because <span class="string">"a"</span> is <span class="keyword">null</span></span><br><span class="line">    at Prog.main(Prog.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException: </span><br><span class="line">        Cannot read field <span class="string">"c"</span> because <span class="string">"a.b"</span> is <span class="keyword">null</span></span><br><span class="line">    at Prog.main(Prog.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException:</span><br><span class="line">        Cannot load from object array because <span class="string">"a[i][j]"</span> is <span class="keyword">null</span></span><br><span class="line">    at Prog.main(Prog.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException:</span><br><span class="line">        Cannot read field <span class="string">"j"</span> because <span class="string">"b"</span> is <span class="keyword">null</span></span><br><span class="line">    at Prog.main(Prog.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="JEP-359-Records-Preview"><a href="#JEP-359-Records-Preview" class="headerlink" title="JEP 359: Records (Preview)"></a><a href="https://openjdk.java.net/jeps/359" target="_blank" rel="noopener">JEP 359: Records (Preview)</a></h2><p>Java Class를 생성하게 되면 생성자, getter, setter등을 구현해야 하고 equals(), hashcode(), toString()과 같은 메서드들도 오버라이딩 해주는 등 코드가 너무 장황해진다. 물론 lombok을 사용하면 이러한 부분을 간소화 할 수 있는데, 이를 보완 하기 위해 나온 기능이 Records이다. 단, 아직 Preview이기 때문에 <code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.</p><p>아래와 같이 구현할 수 있다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">record <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>getter, setter, 생성자 등 구현하지 않아도 되며 equals(), hashcode(), toString() 기본적으로 오버라이딩 되어있다.<br>불변이고, 클레스이기 때문에 인스턴스 필드에 접근제어자를 붙일 수 없으며, 내부데이터를 변경 할 수 없다. (초기화 필드는 기본적으로 private final 이다.) 하지만 static 필드와 메서드를 가질 수 있다. 추가로 클래스를 상속 받을 수 없으며 인터페이스만 구현가능하다.</p><h3 id="JEP-361-Switch-Expressions-Standard"><a href="#JEP-361-Switch-Expressions-Standard" class="headerlink" title="JEP 361: Switch Expressions (Standard)"></a><a href="https://openjdk.java.net/jeps/361" target="_blank" rel="noopener">JEP 361: Switch Expressions (Standard)</a></h3><p>이전 블로그인 Java12, Java13에서 Preview로 추가되었던 기능이 드디어 Stansard되었다. 기존 블로그를 참고하자.</p><h3 id="JEP-363-Remove-the-Concurrent-Mark-Sweep-CMS-Garbage-Collector"><a href="#JEP-363-Remove-the-Concurrent-Mark-Sweep-CMS-Garbage-Collector" class="headerlink" title="JEP 363: Remove the Concurrent Mark Sweep (CMS) Garbage Collector"></a><a href="https://openjdk.java.net/jeps/363" target="_blank" rel="noopener">JEP 363: Remove the Concurrent Mark Sweep (CMS) Garbage Collector</a></h3><p>CMS GC가 삭제 되었다. 기존 JAVA9에서 Deprecated되었는데 Java에서는 아예 삭제가 되었다.<br>ZGC의 MacOS와 Windows 지원이 이번 릴리즈에 포함된거 보면 (<a href="https://openjdk.java.net/jeps/364" target="_blank" rel="noopener">JEP 364</a><a href="https://openjdk.java.net/jeps/365" target="_blank" rel="noopener">JEP 365</a>) G1GC나 ZGC를 이용하라는것 같다.</p><h3 id="JEP-368-Text-Blocks-Second-Preview"><a href="#JEP-368-Text-Blocks-Second-Preview" class="headerlink" title="JEP 368: Text Blocks (Second Preview)"></a><a href="https://openjdk.java.net/jeps/368" target="_blank" rel="noopener">JEP 368: Text Blocks (Second Preview)</a></h3><p>Java13에 Preview로 소개되었던 멀티라인 문자열 기능이 이번에 릴리즈 될 줄 알았건만… Second Preview로 다시 소개 되었다.<br><code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.</p><p>멀티라인 문자열을 사용하기 위해서 아래와 같이 <code>+</code>와 <code>\n</code> 을 이용하여 문자열을 붙여야 했지만</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String html = <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">              <span class="string">"    &lt;body&gt;\n"</span> +</span><br><span class="line">              <span class="string">"        &lt;p&gt;Hello, world&lt;/p&gt;\n"</span> +</span><br><span class="line">              <span class="string">"    &lt;/body&gt;\n"</span> +</span><br><span class="line">              <span class="string">"&lt;/html&gt;\n"</span>;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>아래와 같이 사용이 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String html = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">              &lt;html&gt;</span></span><br><span class="line"><span class="string">                  &lt;body&gt;</span></span><br><span class="line"><span class="string">                      &lt;p&gt;Hello, world&lt;/p&gt;</span></span><br><span class="line"><span class="string">                  &lt;/body&gt;</span></span><br><span class="line"><span class="string">              &lt;/html&gt;</span></span><br><span class="line"><span class="string">              "</span><span class="string">""</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github.io/2020/08/26/Java10
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java13 Releases notes</title>
    <link href="http://yoursite.com/2020/09/07/Java13%20Releases%20notes/"/>
    <id>http://yoursite.com/2020/09/07/Java13%20Releases%20notes/</id>
    <published>2020-09-07T13:27:08.645Z</published>
    <updated>2020-09-08T13:31:37.180Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><ul><li><a href="https://thinkub.github.io/2020/08/26/Java10%20Releases%20notes/" target="_blank" rel="noopener">java10</a> (GA 2018/03/20)</li><li><a href="https://thinkub.github.io/2020/09/07/Java11%20Releases%20notes/" target="_blank" rel="noopener">java11</a> (GA 2018/09/25)</li><li><a href="https://thinkub.github.io/2020/09/07/Java12%20Releases%20notes/" target="_blank" rel="noopener">java12</a> (GA 2019/03/19)</li><li><a href="https://thinkub.github.io/2020/09/07/Java13%20Releases%20notes/" target="_blank" rel="noopener">java13</a> (GA 2019/09/17)</li><li><a href="https://thinkub.github.io/2020/09/07/Java14%20Releases%20notes/" target="_blank" rel="noopener">java14</a> (GA 2020/03/17)</li></ul><h2 id="JEP-350-Dynamic-CDS-Archives"><a href="#JEP-350-Dynamic-CDS-Archives" class="headerlink" title="JEP 350: Dynamic CDS Archives"></a><a href="https://openjdk.java.net/jeps/350" target="_blank" rel="noopener">JEP 350: Dynamic CDS Archives</a></h2><p>애플리케이션 클래스-데이터 공유 를 확장 하여 Java 애플리케이션 실행 종료시 클래스의 동적 아카이브를 허용한다.<br>아카이브 된 클래스에는 기본 기본 계층 CDS 아카이브에 없는 로드 된 모든 애플리케이션 클래스와 라이브러리 클래스가 포함된다.<br>CDS 란 (Class-Data Sharing) 성능 (애플리케이션의 사작 또는 종료)을 향상시키기 위해 Java 애플리케이션 프로세스들 사이에 공통적인 클래스 메타데이터를 공유하는 기능이다.</p><h2 id="JEP-351-ZGC-Uncommit-Unused-Memory-Experimental"><a href="#JEP-351-ZGC-Uncommit-Unused-Memory-Experimental" class="headerlink" title="JEP 351: ZGC: Uncommit Unused Memory (Experimental)"></a><a href="https://openjdk.java.net/jeps/351" target="_blank" rel="noopener">JEP 351: ZGC: Uncommit Unused Memory (Experimental)</a></h2><p>사용하지 않는 힙 메모리를 운영 체제에 반환하도록 ZGC를 향상시킨다. ZGC는 메모리를 오랫동안 사용하지 않은 경우에도 현재 메모리를 커밋 해제하고 운영 체제에 반환하지 않는 문제가 있는데 이런 부분이 개선되었다.</p><h2 id="JEP-353-Reimplement-the-Legacy-Socket-API"><a href="#JEP-353-Reimplement-the-Legacy-Socket-API" class="headerlink" title="JEP 353: Reimplement the Legacy Socket API"></a><a href="https://openjdk.java.net/jeps/353" target="_blank" rel="noopener">JEP 353: Reimplement the Legacy Socket API</a></h2><p>java.net.Socket 및 java.net.ServerSocketAPI에서 사용하는 기본 구현을 유지 관리 및 디버그가 쉬운 더 간단하고 현대적인 구현으로 교체되었다. </p><h2 id="JEP-354-Switch-Expressions-Second-Preview"><a href="#JEP-354-Switch-Expressions-Second-Preview" class="headerlink" title="JEP 354: Switch Expressions (Second Preview)"></a><a href="https://openjdk.java.net/jeps/354" target="_blank" rel="noopener">JEP 354: Switch Expressions (Second Preview)</a></h2><p>java 12 에서 추가된 기능으로 Second Previe다. Java 12와 마찬가지로 아직 Preview이기 때문에 <code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.<br>사용법에 대해선 이전 Java12 Release notes에 작성하였고 이번 Second Preview에 추가된 yield 키워드의 example을 살펴보겠다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j = <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY  -&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> TUESDAY -&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>      -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> k = day.toString().length();</span><br><span class="line">        <span class="keyword">int</span> result = f(k);</span><br><span class="line">        yield result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Foo"</span>: </span><br><span class="line">        yield <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Bar"</span>:</span><br><span class="line">        yield <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"Neither Foo nor Bar, hmmm..."</span>);</span><br><span class="line">        yield <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JEP-355-Text-Blocks-Preview"><a href="#JEP-355-Text-Blocks-Preview" class="headerlink" title="JEP 355: Text Blocks (Preview)"></a><a href="https://openjdk.java.net/jeps/355" target="_blank" rel="noopener">JEP 355: Text Blocks (Preview)</a></h2><p>멀티라인 문자열 기능이 추가되었다. 마찬가지로 아직 Preview이기 때문에 <code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String html = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">              &lt;html&gt;</span></span><br><span class="line"><span class="string">                  &lt;body&gt;</span></span><br><span class="line"><span class="string">                      &lt;p&gt;Hello, world&lt;/p&gt;</span></span><br><span class="line"><span class="string">                  &lt;/body&gt;</span></span><br><span class="line"><span class="string">              &lt;/html&gt;</span></span><br><span class="line"><span class="string">              "</span><span class="string">""</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github.io/2020/08/26/Java10
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java12 Releases notes</title>
    <link href="http://yoursite.com/2020/09/07/Java12%20Releases%20notes/"/>
    <id>http://yoursite.com/2020/09/07/Java12%20Releases%20notes/</id>
    <published>2020-09-07T13:25:09.696Z</published>
    <updated>2020-09-08T13:31:41.693Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><ul><li><a href="https://thinkub.github.io/2020/08/26/Java10%20Releases%20notes/" target="_blank" rel="noopener">java10</a> (GA 2018/03/20)</li><li><a href="https://thinkub.github.io/2020/09/07/Java11%20Releases%20notes/" target="_blank" rel="noopener">java11</a> (GA 2018/09/25)</li><li><a href="https://thinkub.github.io/2020/09/07/Java12%20Releases%20notes/" target="_blank" rel="noopener">java12</a> (GA 2019/03/19)</li><li><a href="https://thinkub.github.io/2020/09/07/Java13%20Releases%20notes/" target="_blank" rel="noopener">java13</a> (GA 2019/09/17)</li><li><a href="https://thinkub.github.io/2020/09/07/Java14%20Releases%20notes/" target="_blank" rel="noopener">java14</a> (GA 2020/03/17)</li></ul><h2 id="JEP-189-Shenandoah-A-Low-Pause-Time-Garbage-Collector-Experimental"><a href="#JEP-189-Shenandoah-A-Low-Pause-Time-Garbage-Collector-Experimental" class="headerlink" title="JEP 189: Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)"></a><a href="https://openjdk.java.net/jeps/189" target="_blank" rel="noopener">JEP 189: Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</a></h2><p>실행중인 Java 스레드와 동시에 비우기 작업을 수행하여 GC 일시 중지 시간을 줄이는 Shenandoah라는 새로운 GC (가비지 수집) 알고리즘이 추가됨. Shenandoah의 일시 중지 시간은 힙 크기와 무관(힙이 200MB이든 200GB이든 일관된 일시 중지 시간이 동일함).</p><h2 id="JEP-230-Microbenchmark-Suite"><a href="#JEP-230-Microbenchmark-Suite" class="headerlink" title="JEP 230: Microbenchmark Suite"></a><a href="https://openjdk.java.net/jeps/230" target="_blank" rel="noopener">JEP 230: Microbenchmark Suite</a></h2><p>JDK 소스 코드에 기본 마이크로 벤치 마크 제품군을 추가하면 개발자가 기존 마이크로 벤치 마크를 쉽게 실행하고 새 마이크로 벤치 마크를 쉽게 만들 수 있다.</p><h2 id="JEP-325-Switch-Expressions-Preview"><a href="#JEP-325-Switch-Expressions-Preview" class="headerlink" title="JEP 325: Switch Expressions (Preview)"></a><a href="https://openjdk.java.net/jeps/325" target="_blank" rel="noopener">JEP 325: Switch Expressions (Preview)</a></h2><p>switch문 또는 식으로 사용할 수 있도록 문을 확장하고 두 양식 모두 “전통적인”또는 “단순화 된”범위 지정 및 제어 흐름 동작을 사용할 수 있다. Preview 이므로 <code>--enable-preview</code> 옵션을 줘야 사용할 수 있는 기능이다.<br>참고 :이 JEP는 JDK 13을 대상으로 하는 <a href="https://openjdk.java.net/jeps/354" target="_blank" rel="noopener">JEP 354</a> 로 대체 된다.</p><p>현재 Java switch명령문 의 디자인은 C 및 C ++와 같은 언어를 밀접하게 따르고 있다.<br>예를 들어, 다음 코드에서 많은 break문은 불필요하게 장황하게 만든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY:</span><br><span class="line">    <span class="keyword">case</span> FRIDAY:</span><br><span class="line">    <span class="keyword">case</span> SUNDAY:</span><br><span class="line">        System.out.println(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> TUESDAY:</span><br><span class="line">        System.out.println(<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> THURSDAY:</span><br><span class="line">    <span class="keyword">case</span> SATURDAY:</span><br><span class="line">        System.out.println(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">        System.out.println(<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 개선할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; System.out.println(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">case</span> TUESDAY                -&gt; System.out.println(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">case</span> THURSDAY, SATURDAY     -&gt; System.out.println(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY              -&gt; System.out.println(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 문은 Statement에서 Expression 으로 바뀐다. 아래와 같이 Return 값을 받을 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> numLetters = <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">case</span> TUESDAY                -&gt; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">case</span> THURSDAY, SATURDAY     -&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY              -&gt; <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>아직 Preview단계이나 상당히 기대되는 변화 중 하나다.</p><h2 id="JEP-340-One-AArch64-Port-Not-Two"><a href="#JEP-340-One-AArch64-Port-Not-Two" class="headerlink" title="JEP 340: One AArch64 Port, Not Two"></a><a href="https://openjdk.java.net/jeps/340" target="_blank" rel="noopener">JEP 340: One AArch64 Port, Not Two</a></h2><p>ARM 포트가 1개가 된다. 32bit와, 64bit 를 유지하면서 arm64 port와 관련된 모든 소스를 제거한다.<br>그렇게 되면 하나의 64bit ARM 구현을 하고 2개 포트를 유지 관리하는 데 따르는 중복 작업을 없앨 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github.io/2020/08/26/Java10
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java11 Releases notes</title>
    <link href="http://yoursite.com/2020/09/07/Java11%20Releases%20notes/"/>
    <id>http://yoursite.com/2020/09/07/Java11%20Releases%20notes/</id>
    <published>2020-09-07T06:21:36.964Z</published>
    <updated>2020-09-08T13:31:47.871Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><ul><li><a href="https://thinkub.github.io/2020/08/26/Java10%20Releases%20notes/" target="_blank" rel="noopener">java10</a> (GA 2018/03/20)</li><li><a href="https://thinkub.github.io/2020/09/07/Java11%20Releases%20notes/" target="_blank" rel="noopener">java11</a> (GA 2018/09/25)</li><li><a href="https://thinkub.github.io/2020/09/07/Java12%20Releases%20notes/" target="_blank" rel="noopener">java12</a> (GA 2019/03/19)</li><li><a href="https://thinkub.github.io/2020/09/07/Java13%20Releases%20notes/" target="_blank" rel="noopener">java13</a> (GA 2019/09/17)</li><li><a href="https://thinkub.github.io/2020/09/07/Java14%20Releases%20notes/" target="_blank" rel="noopener">java14</a> (GA 2020/03/17)</li></ul><h2 id="JEP-181-Nest-Based-Access-Control"><a href="#JEP-181-Nest-Based-Access-Control" class="headerlink" title="JEP 181: Nest-Based Access Control"></a><a href="https://openjdk.java.net/jeps/181" target="_blank" rel="noopener">JEP 181: Nest-Based Access Control</a></h2><p>서로다른 클래스간 접근이 가능하도록 논리적으로 그룹화 해준다. 이 경우 private method도 접근이 가능하다.</p><h2 id="JEP-318-Epsilon-A-No-Op-Garbage-Collector"><a href="#JEP-318-Epsilon-A-No-Op-Garbage-Collector" class="headerlink" title="JEP 318: Epsilon: A No-Op Garbage Collector"></a><a href="https://openjdk.java.net/jeps/318" target="_blank" rel="noopener">JEP 318: Epsilon: A No-Op Garbage Collector</a></h2><p>수동으로 GC를 실행하거나 GC를 실행하지 않을 수 있다.</p><h2 id="JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector"><a href="#JEP-333-ZGC-A-Scalable-Low-Latency-Garbage-Collector" class="headerlink" title="JEP 333: ZGC: A Scalable Low-Latency Garbage Collector"></a><a href="https://openjdk.java.net/jeps/333" target="_blank" rel="noopener">JEP 333: ZGC: A Scalable Low-Latency Garbage Collector</a></h2><p>가비지 컬렉터가 동작시 JVM을 멈추게 되는데 이 시간을 10ms초과 하지 않고 G1사용에 비해 15%이하의 애플리케이션 처리량이 감소한다.<br>지원하는 플랫폼은 Linux / x64(64bit) 이다.</p><h2 id="JEP-320-Remove-the-Java-EE-and-CORBA-Modules"><a href="#JEP-320-Remove-the-Java-EE-and-CORBA-Modules" class="headerlink" title="JEP 320: Remove the Java EE and CORBA Modules"></a><a href="https://openjdk.java.net/jeps/320" target="_blank" rel="noopener">JEP 320: Remove the Java EE and CORBA Modules</a></h2><p>Java SE 플랫폼 및 JDK에서 Java EE 및 CORBA 모듈을 제거 됬다. 해당 모듈은 Java SE 9에서 더 이상 사용되지 않으며 향후 릴리스에서 제거 대상이다. </p><h2 id="JEP-321-HTTP-Client-Standard"><a href="#JEP-321-HTTP-Client-Standard" class="headerlink" title="JEP 321: HTTP Client (Standard)"></a><a href="https://openjdk.java.net/jeps/321" target="_blank" rel="noopener">JEP 321: HTTP Client (Standard)</a></h2><p>Java9 에서 도입되고 Java10에서 업데이트 된 <a href="https://openjdk.java.net/jeps/110" target="_blank" rel="noopener">JEP 110</a> Http Client api 를 표준화함</p><h2 id="JEP-323-Local-Variable-Syntax-for-Lambda-Parameters"><a href="#JEP-323-Local-Variable-Syntax-for-Lambda-Parameters" class="headerlink" title="JEP 323: Local-Variable Syntax for Lambda Parameters"></a><a href="https://openjdk.java.net/jeps/323" target="_blank" rel="noopener">JEP 323: Local-Variable Syntax for Lambda Parameters</a></h2><p>Java10 에서 추가된 var의 타입추론이 람다 식의 형식 매개 변수를 선언 할 때 사용 가능하다.</p><h2 id="JEP-328-Flight-Recorder"><a href="#JEP-328-Flight-Recorder" class="headerlink" title="JEP 328: Flight Recorder"></a><a href="https://openjdk.java.net/jeps/328" target="_blank" rel="noopener">JEP 328: Flight Recorder</a></h2><p>Java 애플리케이션 및 HotSpot JVM 문제를 해결하기 위해 오버 헤드가 적은 데이터 수집 프레임 워크를 제공함<br>기존 Oracle Java 유료 Add-on이었던 JFR(Java Flight Recoder)를 오픈소스로 공개함</p><h2 id="JEP-329-ChaCha20-and-Poly1305-Cryptographic-Algorithms"><a href="#JEP-329-ChaCha20-and-Poly1305-Cryptographic-Algorithms" class="headerlink" title="JEP 329: ChaCha20 and Poly1305 Cryptographic Algorithms"></a><a href="https://openjdk.java.net/jeps/329" target="_blank" rel="noopener">JEP 329: ChaCha20 and Poly1305 Cryptographic Algorithms</a></h2><p>ChaCha20 및 ChaCha20-Poly1305 암호를 구현함. ChaCha20은 사용되던 RC4 스트림 암호는 오랫동안 안전하지 않은것으로 간주되었다. RC4를 대체 할 수있는 비교적 새로운 스트림 암호</p><h2 id="JEP-332-Transport-Layer-Security-TLS-1-3"><a href="#JEP-332-Transport-Layer-Security-TLS-1-3" class="headerlink" title="JEP 332: Transport Layer Security (TLS) 1.3"></a><a href="https://openjdk.java.net/jeps/332" target="_blank" rel="noopener">JEP 332: Transport Layer Security (TLS) 1.3</a></h2><p>TLS (전송 계층 보안) 프로토콜 RFC 8446 버전 1.3을 구현</p><h2 id="JEP-335-Deprecate-the-Nashorn-JavaScript-Engine"><a href="#JEP-335-Deprecate-the-Nashorn-JavaScript-Engine" class="headerlink" title="JEP 335: Deprecate the Nashorn JavaScript Engine"></a><a href="https://openjdk.java.net/jeps/335" target="_blank" rel="noopener">JEP 335: Deprecate the Nashorn JavaScript Engine</a></h2><p>Nashorn JavaScript 엔진은 Rhino 스크립팅 엔진을 대체하기 위해 JEP 174 를 통해 JDK 8에 처음 통합되었으나 Deprecate 됨</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github.io/2020/08/26/Java10
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java10 Releases notes</title>
    <link href="http://yoursite.com/2020/08/26/Java10%20Releases%20notes/"/>
    <id>http://yoursite.com/2020/08/26/Java10%20Releases%20notes/</id>
    <published>2020-08-26T11:54:20.673Z</published>
    <updated>2020-09-08T13:31:53.781Z</updated>
    
    <content type="html"><![CDATA[<p>아주 오랜 기간 블로그 작성을 못하고 있었다.<br>바빴……다기 보다 게을러 져서 ㅠㅠ<br>최근에 진행한 프로젝트까지 Java8을 사용했었다. 정신을 차리고 보니 벌써 Java14가 Release된 걸 보면서 공부를 너무 게을리 하고있구나…. 라는 생각에 정리를 해보고자 한다.</p><h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><ul><li><a href="https://thinkub.github.io/2020/08/26/Java10%20Releases%20notes/" target="_blank" rel="noopener">java10</a> (GA 2018/03/20)</li><li><a href="https://thinkub.github.io/2020/09/07/Java11%20Releases%20notes/" target="_blank" rel="noopener">java11</a> (GA 2018/09/25)</li><li><a href="https://thinkub.github.io/2020/09/07/Java12%20Releases%20notes/" target="_blank" rel="noopener">java12</a> (GA 2019/03/19)</li><li><a href="https://thinkub.github.io/2020/09/07/Java13%20Releases%20notes/" target="_blank" rel="noopener">java13</a> (GA 2019/09/17)</li><li><a href="https://thinkub.github.io/2020/09/07/Java14%20Releases%20notes/" target="_blank" rel="noopener">java14</a> (GA 2020/03/17)</li></ul><h2 id="JEP-286-Local-Variable-Type-Inference"><a href="#JEP-286-Local-Variable-Type-Inference" class="headerlink" title="JEP 286: Local-Variable Type Inference"></a><a href="https://openjdk.java.net/jeps/286" target="_blank" rel="noopener">JEP 286: Local-Variable Type Inference</a></h2><p>로컬 변수의 유형을 추론 할 수 있다. 변수는 선언시 당연하게 타입을 지정해야 했다. Java10에서는 로컬 변수 선언을 var를 이용하여 선언이 가능하며 컴파일 시 타입을 추론 할 수 있다. 개인적으론 이번 Release에서 가장 많이 사용 할 것 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;();  <span class="comment">// infers ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="keyword">var</span> stream = list.stream();          <span class="comment">// infers Stream&lt;String&gt;</span></span><br></pre></td></tr></table></figure><p>초기화 되어있는 로컬 변수, 반복문에서 로컬 선언 된 로컬 변수로 제한됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strA = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">var</span> strB = <span class="string">"b"</span>;</span><br><span class="line"><span class="keyword">var</span> strC = <span class="string">"c"</span>;</span><br><span class="line"><span class="keyword">var</span> strs = Arrays.asList(strA, strB, strC, <span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> str : strs) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java는 이미 RHS(lambda formals, generic method type arguments, diamond)에서 이미 타입 추론을 하고 있기 때문에 이러한 표션식의 LHS에서 사용하려는 시도가 실패 할 위험이 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Main.java:<span class="number">81</span>: error: cannot infer type <span class="keyword">for</span> local</span><br><span class="line">variable x</span><br><span class="line">        <span class="keyword">var</span> x;</span><br><span class="line">            ^</span><br><span class="line">  (cannot use <span class="string">'val'</span> on variable without initializer)</span><br><span class="line"></span><br><span class="line">Main.java:<span class="number">82</span>: error: cannot infer type <span class="keyword">for</span> local</span><br><span class="line">variable f</span><br><span class="line">        <span class="keyword">var</span> f = () -&gt; &#123; &#125;;</span><br><span class="line">            ^</span><br><span class="line">  (lambda expression needs an explicit target-type) </span><br><span class="line"></span><br><span class="line">Main.java:<span class="number">83</span>: error: cannot infer type <span class="keyword">for</span> local</span><br><span class="line">variable g</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">null</span>;</span><br><span class="line">            ^</span><br><span class="line">  (variable initializer is <span class="string">'null'</span>)</span><br><span class="line"></span><br><span class="line">Main.java:<span class="number">84</span>: error: cannot infer type <span class="keyword">for</span> local</span><br><span class="line">variable c</span><br><span class="line">        <span class="keyword">var</span> c = l();</span><br><span class="line">            ^</span><br><span class="line">  (inferred type is non denotable)</span><br><span class="line"></span><br><span class="line">Main.java:<span class="number">195</span>: error: cannot infer type <span class="keyword">for</span> local variable m</span><br><span class="line">        <span class="keyword">var</span> m = <span class="keyword">this</span>::l;</span><br><span class="line">            ^</span><br><span class="line">  (method reference needs an explicit target-type)</span><br><span class="line"></span><br><span class="line">Main.java:<span class="number">199</span>: error: cannot infer type <span class="keyword">for</span> local variable k</span><br><span class="line">        <span class="keyword">var</span> k = &#123; <span class="number">1</span> , <span class="number">2</span> &#125;;</span><br><span class="line">            ^</span><br><span class="line">  (array initializer needs an explicit target-type)</span><br></pre></td></tr></table></figure><h2 id="JEP-296-Consolidate-the-JDK-Forest-into-a-Single-Repository"><a href="#JEP-296-Consolidate-the-JDK-Forest-into-a-Single-Repository" class="headerlink" title="JEP 296: Consolidate the JDK Forest into a Single Repository"></a><a href="https://openjdk.java.net/jeps/296" target="_blank" rel="noopener">JEP 296: Consolidate the JDK Forest into a Single Repository</a></h2><p>JDK 포리스트의 수많은 리포지토리를 단일 리포지토리로 결합하여 개발을 단순화하고 간소화합니다.</p><h2 id="JEP-304-Garbage-Collector-Interface"><a href="#JEP-304-Garbage-Collector-Interface" class="headerlink" title="JEP 304: Garbage Collector Interface"></a><a href="https://openjdk.java.net/jeps/304" target="_blank" rel="noopener">JEP 304: Garbage Collector Interface</a></h2><p>깨끗한 GC (가비지 수집기) 인터페이스를 도입하여 다양한 가비지 수집기의 소스 코드 격리를 개선합니다.</p><h2 id="JEP-307-Parallel-Full-GC-for-G1"><a href="#JEP-307-Parallel-Full-GC-for-G1" class="headerlink" title="JEP 307: Parallel Full GC for G1"></a><a href="https://openjdk.java.net/jeps/307" target="_blank" rel="noopener">JEP 307: Parallel Full GC for G1</a></h2><p>전체 GC를 병렬로 만들어 G1 최악의 지연 시간을 개선합니다.<br>G1 가비지 수집기는 전체 수집을 방지하도록 설계되었지만 동시 수집이 메모리를 충분히 빠르게 회수 할 수없는 경우 전체 GC 폴 백이 발생합니다. G1에 대한 전체 GC의 현재 구현은 단일 스레드 mark-sweep-compact 알고리즘을 사용합니다. mark-sweep-compact 알고리즘을 병렬화하고 Young 및 Mixed 컬렉션과 동일한 수의 스레드를 사용하려고합니다. 스레드 수는 -XX:ParallelGCThreads옵션 으로 제어 할 수 있지만 이는 Young 및 Mixed 컬렉션에 사용되는 스레드 수에도 영향을줍니다.</p><h2 id="JEP-310-Application-Class-Data-Sharing"><a href="#JEP-310-Application-Class-Data-Sharing" class="headerlink" title="JEP 310: Application Class-Data Sharing"></a><a href="https://openjdk.java.net/jeps/310" target="_blank" rel="noopener">JEP 310: Application Class-Data Sharing</a></h2><p>시작 및 풋 프린트를 개선하려면 기존 Class-Data Sharing(“CDS”) 기능을 확장하여 애플리케이션 클래스를 공유 아카이브에 배치 할 수 있습니다.</p><h2 id="JEP-312-Thread-Local-Handshakes"><a href="#JEP-312-Thread-Local-Handshakes" class="headerlink" title="JEP 312: Thread-Local Handshakes"></a><a href="https://openjdk.java.net/jeps/312" target="_blank" rel="noopener">JEP 312: Thread-Local Handshakes</a></h2><p>전역 VM safepoint를 수행하지 않고 스레드에서 콜백을 실행하는 방법을 소개합니다. 모든 스레드가 아닌 개별 스레드를 중지하는 것이 가능하고 저렴하게 만드십시오.</p><h2 id="JEP-313-Remove-the-Native-Header-Generation-Tool-javah"><a href="#JEP-313-Remove-the-Native-Header-Generation-Tool-javah" class="headerlink" title="JEP 313: Remove the Native-Header Generation Tool (javah)"></a><a href="https://openjdk.java.net/jeps/313" target="_blank" rel="noopener">JEP 313: Remove the Native-Header Generation Tool (javah)</a></h2><p>이 도구는 JDK 8 ( JDK-7150368 )에 추가 된 javac의 우수한 기능으로 대체되었습니다. 이 기능은 Java 소스 코드가 컴파일 될 때 원시 헤더 파일을 작성하는 기능을 제공하므로 javah는 제거 되었습니다.</p><h2 id="JEP-314-Additional-Unicode-Language-Tag-Extensions"><a href="#JEP-314-Additional-Unicode-Language-Tag-Extensions" class="headerlink" title="JEP 314: Additional Unicode Language-Tag Extensions"></a><a href="https://openjdk.java.net/jeps/314" target="_blank" rel="noopener">JEP 314: Additional Unicode Language-Tag Extensions</a></h2><p>java.util.LocaleBCP 47 언어 태그의 추가 유니 코드 확장을 구현하도록 관련 API를 개선 합니다.<br>지원 BCP 47 개 언어 태그는 초기 하였다 자바 SE 7에 추가 된 캘린더와 숫자로 제한 유니 코드 로케일 확장에 대한 지원. 이 JEP는 관련 JDK 클래스에서 최신 LDML 사양에 지정된 더 많은 확장을 구현합니다.</p><h2 id="JEP-316-Heap-Allocation-on-Alternative-Memory-Devices"><a href="#JEP-316-Heap-Allocation-on-Alternative-Memory-Devices" class="headerlink" title="JEP 316: Heap Allocation on Alternative Memory Devices"></a><a href="https://openjdk.java.net/jeps/316" target="_blank" rel="noopener">JEP 316: Heap Allocation on Alternative Memory Devices</a></h2><p>사용자가 지정한 NV-DIMM과 같은 대체 메모리 장치에 Java 개체 힙을 할당하도록 HotSpot VM을 활성화합니다.</p><h2 id="JEP-317-Experimental-Java-Based-JIT-Compiler"><a href="#JEP-317-Experimental-Java-Based-JIT-Compiler" class="headerlink" title="JEP 317: Experimental Java-Based JIT Compiler"></a><a href="https://openjdk.java.net/jeps/317" target="_blank" rel="noopener">JEP 317: Experimental Java-Based JIT Compiler</a></h2><p>Linux / x64 플랫폼에서 실험적인 JIT 컴파일러로 사용할 Java 기반 JIT 컴파일러 Graal을 활성화합니다.<br>Graal을 Linux / x64 플랫폼부터 실험적인 JIT 컴파일러로 사용하도록 설정합니다. Graal은 JDK 9에 도입 된 JVMCI (JVM 컴파일러 인터페이스)를 사용합니다. Graal은 이미 JDK에 있으므로 실험적인 JIT로 활성화하는 것은 주로 테스트 및 디버깅 작업이 될 것입니다.<br>Graal을 JIT 컴파일러로 활성화하려면 java명령 줄 에서 다음 옵션을 사용하십시오 .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler</span><br></pre></td></tr></table></figure><h2 id="JEP-319-Root-Certificates"><a href="#JEP-319-Root-Certificates" class="headerlink" title="JEP 319: Root Certificates"></a><a href="https://openjdk.java.net/jeps/319" target="_blank" rel="noopener">JEP 319: Root Certificates</a></h2><p>JDK에서 기본 루트 인증 기관 (CA) 인증서 세트를 제공하십시오.<br>OpenJDK 빌드를 개발자에게 더 매력적으로 만들고 이러한 빌드와 Oracle JDK 빌드 간의 차이를 줄이기 위해 Oracle Java SE Root CA 프로그램에서 루트 인증서를 오픈 소스합니다.<br>cacerts스토어는 오라클의 자바 SE 루트 CA 프로그램의 CA에서 발급 루트 인증서 세트로 채워집니다. 전제 조건으로 각 CA는 Oracle에 인증서를 오픈 소스 할 수있는 권한을 부여하기 위해 OCA (Oracle Contributor Agreement) 또는 이와 동등한 계약에 서명해야합니다 . 다음은 필수 계약에 서명 한 CA와 포함될 루트 인증서 (고유 이름으로 식별) 목록입니다. 이 목록에는 현재 Oracle Java SE Root CA 프로그램의 구성원 인 CA 대부분이 포함됩니다. 계약에 서명하지 않은 사람은 현재 포함되지 않습니다. 처리하는 데 더 오래 걸리는 항목은 다음 릴리스에 포함됩니다.</p><h2 id="JEP-322-Time-Based-Release-Versioning"><a href="#JEP-322-Time-Based-Release-Versioning" class="headerlink" title="JEP 322: Time-Based Release Versioning"></a><a href="https://openjdk.java.net/jeps/322" target="_blank" rel="noopener">JEP 322: Time-Based Release Versioning</a></h2><p>현재 및 미래의 시간 기반 릴리스 모델에 대해 Java SE 플랫폼 및 JDK의 버전 문자열 체계와 관련 버전 관리 정보를 수정합니다.<br>버전 번호 , $VNUM기간 문자 (U + 002E)에 의해 분리 된 소자 비어 시퀀스이다. 요소는 0이거나 선행 0이없는 부호없는 정수입니다. 버전 번호의 마지막 요소는 0이 아니어야합니다. 요소가 증가하면 모든 후속 요소가 제거됩니다. 형식은 다음과 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1-9][0-9]*((\.0)*\.[1-9][0-9]*)*</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아주 오랜 기간 블로그 작성을 못하고 있었다.&lt;br&gt;바빴……다기 보다 게을러 져서 ㅠㅠ&lt;br&gt;최근에 진행한 프로젝트까지 Java8을 사용했었다. 정신을 차리고 보니 벌써 Java14가 Release된 걸 보면서 공부를 너무 게을리 하고있구나…. 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VSCode로 Spring Boot 사용시 profile설정</title>
    <link href="http://yoursite.com/2020/03/04/VSCode%EB%A1%9C%20Spring%20Boot%20%EC%82%AC%EC%9A%A9%EC%8B%9C%20profile%EC%84%A4%EC%A0%95/"/>
    <id>http://yoursite.com/2020/03/04/VSCode%EB%A1%9C%20Spring%20Boot%20%EC%82%AC%EC%9A%A9%EC%8B%9C%20profile%EC%84%A4%EC%A0%95/</id>
    <published>2020-03-04T02:35:10.110Z</published>
    <updated>2020-03-04T04:21:01.016Z</updated>
    
    <content type="html"><![CDATA[<p>전 글에서 VSCode를 이용해서 spring boot project를 구동해봤습니다.<br>시작한 김에 기존 project를 local에서 구동해보려고 시도를 했는데….. local 에서 구동이 되지 않는 문제가 발생했습니다.<br><strong>결론부터 말하면 application 구동시 spring profiles 설정을 하지 않았기 때문입니다.</strong></p><h1 id="Spring-Profiles"><a href="#Spring-Profiles" class="headerlink" title="Spring Profiles"></a>Spring Profiles</h1><p>spring boot를 이용해 application 개발시 각종 설정에 대한 정보를 <strong>application.yml</strong> 에 작성합니다.<br>어떤 port를 사용할지, logging 전략은 어떤식으로 구성할지, 어떤 DB를 사용하고 해당 db에 대한 접속 정보를 작성하는 등 많은 설정을 작성하게 됩니다. (물론 중요정보가 있는 설정의 경우는 application.yml 에 설정하지 않는것을 지향합니다.)<br>그리고 해당 설정 정보는 대부분 phase마다 다르게 구성합니다. </p><p>spring은 profiles라는 기능을 통해 구동되는 환경에 따라 설정값을 구분 지을 수 있도록 해줍니다.</p><h1 id="Profiles가-설정된-application-구동"><a href="#Profiles가-설정된-application-구동" class="headerlink" title="Profiles가 설정된 application 구동"></a>Profiles가 설정된 application 구동</h1><p>예전에 개발했던 broker-api를 구동해보겠습니다.</p><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><ul><li>아래 설정과 같이 <strong>local</strong>과 <strong>prod</strong>의 mongodb 접속 설정정보와 application의 port번호가 다르게 설정되어있다.<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">local</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">local123</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">local</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">prod</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">prod123</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">prod</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27018</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18081</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="VSCode에서-Application-구동"><a href="#VSCode에서-Application-구동" class="headerlink" title="VSCode에서 Application 구동"></a>VSCode에서 Application 구동</h3><ul><li><p>applicatin 구동 시키면 아래처럼 logo만 출력되고 application 이 down 되어버림.<br><img src="/img/2020/03/04/1.png" alt=""></p></li><li><p>debug를 해보면 아래와 같이 <strong>java.lang.IllegalArgumentException: Could not resolve placeholder ‘spring.data.mongodb.uri’ in value “${spring.data.mongodb.uri}</strong> 오류가 발생합니다.<br><img src="/img/2020/03/04/2.png" alt=""></p></li><li><p>mongoDB 관련 configuration 에서 해당 정보를 설정 파일에서 가져오지 못하는 문제가 있습니다.<br><img src="/img/2020/03/04/3.png" alt=""></p></li></ul><h3 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h3><ul><li><p>위 설정과 같이 spring profiles를 사용하는 경우 application 구동시 어떤 profiles를 사용할지에 대해 정의 해줘야 합니다.</p></li><li><p>VSCode는 해당 설정을 <strong>launch.json</strong> 에서 할 수 있습니다.<br><img src="/img/2020/03/04/4.png" alt=""></p></li><li><p>args 에 spring profile 설정을 정의하겠습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"java"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Spring Boot-BrokerApiApplication&lt;broker-api&gt;"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"console"</span>: <span class="string">"internalConsole"</span>,</span><br><span class="line">            <span class="attr">"mainClass"</span>: <span class="string">"com.saltlux.brokerapi.BrokerApiApplication"</span>,</span><br><span class="line">            <span class="attr">"projectName"</span>: <span class="string">"broker-api"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: <span class="string">"--spring.profiles.active=local"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/2020/03/04/5.png" alt=""></p></li><li><p>application 재기동<br><img src="/img/2020/03/04/6.png" alt=""><br><img src="/img/2020/03/04/7.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;전 글에서 VSCode를 이용해서 spring boot project를 구동해봤습니다.&lt;br&gt;시작한 김에 기존 project를 local에서 구동해보려고 시도를 했는데….. local 에서 구동이 되지 않는 문제가 발생했습니다.&lt;br&gt;&lt;stron
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VSCode로 Spring Boot 사용해보기</title>
    <link href="http://yoursite.com/2020/03/03/VSCode%EB%A1%9C%20Spring%20Boot%20%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/03/03/VSCode%EB%A1%9C%20Spring%20Boot%20%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/</id>
    <published>2020-03-03T00:43:15.869Z</published>
    <updated>2020-03-03T02:05:35.337Z</updated>
    
    <content type="html"><![CDATA[<p>처음 개발을 시작하면서 사용했던 IDE는 eclipse를 사용했습니다. Spring Framework를 사용하면서 STS로 갈아타서 사용하다가<br>본사와 신규로 입사한 시니어개발자 최모 군이 IntelliJ 를 사용하는 걸 보고, 팀장님과 회사를 조르고 졸라서 구매해서 사용했었습니다.<br>현재도 IntelliJ를 이용해서 개발중이지만, 이직한 회사에서는 구매해줄 것 같지 않은 분위기에 개인 라이선스를 구매해서 사용했습니다.<br>그러다 요즘 VSCode를 많이 이용한다하여 시도해봤습니다.</p><h1 id="사전작업"><a href="#사전작업" class="headerlink" title="사전작업"></a>사전작업</h1><p>VSCode 는 설치되어있다는 가정하에 진행하겠습니다.<br>Mac OS 에서 진행했습니다.</p><h3 id="Market에서-확장-Plugin-download"><a href="#Market에서-확장-Plugin-download" class="headerlink" title="Market에서 확장 Plugin download"></a>Market에서 확장 Plugin download</h3><ol><li><strong>Java Extension Pack</strong> (해당 Plugin을 설치하면 아래 Plugin 도 같이 설치가 됨 (Mac기준 Windows 에서는 안깔려있는데 이유는 모르겠음))<ul><li>Maven for Java (<code>Gradle을 사용하기 위해서는 Gradle Language Support 를 설치해야 합니다.</code>)</li><li>Debegger for Java</li><li>Java Test Runner</li><li>Languages Support for Java</li><li>Java Dependency Viewer</li></ul></li></ol><p><img src="/img/2020/03/03/1.png" alt=""></p><ol start="2"><li><strong>Spring Boot Extension Pack</strong> (아래 Plugin도 같이 설치가 됨)<ul><li>Spring Initializr Java Support </li><li>Spring Boot Tools</li></ul></li></ol><p><img src="/img/2020/03/03/2.png" alt=""></p><ol start="3"><li>Tomcat for java (Tomcat을 사용하는 Project가 있는경우 설치하자)</li><li>Checkstyle for Java (<code>선택</code>)</li><li>Java Code Generators (<code>선택</code>)</li></ol><h3 id="jdk경로-설정"><a href="#jdk경로-설정" class="headerlink" title="jdk경로 설정"></a>jdk경로 설정</h3><ol><li>Code &gt; Preferences &gt; Settings<br><img src="/img/2020/03/03/3.png" alt=""></li><li>Search settings에 <code>jdk</code> 입력하면 Java:Home 의 setting 파일을 수정할 수 있습니다. (<code>Edit in settings.json 클릭</code>)<br><img src="/img/2020/03/03/4.png" alt=""></li><li>java.home 설정<br><img src="/img/2020/03/03/4-1.png" alt=""></li></ol><h1 id="간단한-Spring-Boot-Project-만들어보기"><a href="#간단한-Spring-Boot-Project-만들어보기" class="headerlink" title="간단한 Spring Boot Project 만들어보기"></a>간단한 Spring Boot Project 만들어보기</h1><ol><li>cmd + shift + p 입력 후 <code>spring initializr</code> 입력 후 선택 (전 spring initializr: Generate a Gradle Project를 선택했습니다.)<br><img src="/img/2020/03/03/5.png" alt=""></li><li>language 선택 (전 Java를 선택하겠습니다.)</li><li>group ID 지정<br><img src="/img/2020/03/03/7.png" alt=""></li><li>artifact ID 지정<br><img src="/img/2020/03/03/8.png" alt=""></li><li>spring boot version 선택<br><img src="/img/2020/03/03/9.png" alt=""></li><li>dependency 설정<br><img src="/img/2020/03/03/10.png" alt=""></li><li>설치 folder 설정<br><img src="/img/2020/03/03/11.png" alt=""></li><li>설정 완료<br><img src="/img/2020/03/03/12.png" alt=""></li></ol><h1 id="간단한-Application생성-후-실행해보기"><a href="#간단한-Application생성-후-실행해보기" class="headerlink" title="간단한 Application생성 후 실행해보기"></a>간단한 Application생성 후 실행해보기</h1><ol><li>간단하게 입력받은 text를 화면에 보여주는 기능을 구현해보겠습니다.<br><img src="/img/2020/03/03/13.png" alt=""></li><li>local 실행하기<br><img src="/img/2020/03/03/14.png" alt=""><br><img src="/img/2020/03/03/15.png" alt=""><br><img src="/img/2020/03/03/16.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;처음 개발을 시작하면서 사용했던 IDE는 eclipse를 사용했습니다. Spring Framework를 사용하면서 STS로 갈아타서 사용하다가&lt;br&gt;본사와 신규로 입사한 시니어개발자 최모 군이 IntelliJ 를 사용하는 걸 보고, 팀장님과 회사
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Provisioning - 3. Ansible을 이용해 kubernetes cluster 생성하기</title>
    <link href="http://yoursite.com/2020/02/28/Provisioning%20-%203.%20Ansible%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%B4%20kubernetes%20cluster%20%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/02/28/Provisioning%20-%203.%20Ansible%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%B4%20kubernetes%20cluster%20%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</id>
    <published>2020-02-28T00:23:48.365Z</published>
    <updated>2020-02-28T00:33:12.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>Ansible을 이용해서 k8s cluster을 생성해보겠습니다.<br>cluster를 생성하는 방법은 <a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">Container Orchestration - 4. kubernetes Install</a>에 작성 한 것과 같이 <strong>master</strong> 1대와 <strong>node</strong> 2대를 셋팅해 보겠습니다.<br><strong>기존에 공유드린 것과 같이 master / node 클러스터 구성시 <code>방화벽작업</code>을 하고 <code>docker를 설치</code>하고 <code>k8s 관련 install</code> 작업을 했습니다. 이러한 작업을 ansible playbook 을 이용해 한번에 처리해보도록 하겠습니다.</strong></p><h1 id="1-구성"><a href="#1-구성" class="headerlink" title="1. 구성"></a>1. 구성</h1><table><thead><tr><th>host name</th><th>역할</th></tr></thead><tbody><tr><td>ansible-manager</td><td>Ansible 제어 노드 및 작업자용 노드</td></tr><tr><td>ansible-master</td><td>k8s Master</td></tr><tr><td>ansible-node1</td><td>k8s Node</td></tr><tr><td>ansible-node2</td><td>k9s Node</td></tr></tbody></table><p><img src="/img/2020/02/28/2.png" alt=""></p><h1 id="2-Ansible-설치"><a href="#2-Ansible-설치" class="headerlink" title="2. Ansible 설치"></a>2. Ansible 설치</h1><h3 id="2-1-ansible-manager-에-Ansible-설치"><a href="#2-1-ansible-manager-에-Ansible-설치" class="headerlink" title="2.1 ansible-manager 에 Ansible 설치"></a>2.1 ansible-manager 에 Ansible 설치</h3><p>ansible-manager 에 Ansible을 설치하겠습니다. Ansible 이 다른 IaC보다 편한점이 <strong>Pull 방식이 아닌 Push 방식으로 대상 서버에는 별도의 셋팅이 필요하지 않습니다.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y eple-release</span><br><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/28/3.png" alt=""></p><h3 id="2-2-Password-없이-접속이-가능하도록-작업"><a href="#2-2-Password-없이-접속이-가능하도록-작업" class="headerlink" title="2.2 Password 없이 접속이 가능하도록 작업"></a>2.2 Password 없이 접속이 가능하도록 작업</h3><ul><li><p>ROOT 로그인을 허용하도록 설정을 수정합니다. <code>ansible-master</code>, <code>ansible-node1</code>, <code>ansible-node2</code> 에서 작업</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></li><li><p><strong>ansible-manager</strong> 에서 SSH키 생성을 합니다. <strong>password 는 별도로 작성하지 않습니다.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/28/4.png" alt=""></p></li><li><p>생성한 key를 ansible-master, ansible-node1, ansible-node2 에 복사해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id [serverIP]</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/28/5.png" alt=""></p></li><li><p>ssh 접속이 되는지 확인합니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [server_host_name]</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/28/6.png" alt=""></p></li></ul><h3 id="2-1-Inventory를-작성하여-Ping-Test"><a href="#2-1-Inventory를-작성하여-Ping-Test" class="headerlink" title="2.1 Inventory를 작성하여 Ping Test"></a>2.1 Inventory를 작성하여 Ping Test</h3><ul><li><p>다음과 같이 host파일을 생성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">master ansible_host=10.128.0.40 ansible_user=root</span><br><span class="line"></span><br><span class="line">[nodes]</span><br><span class="line">node1 ansible_host=10.128.0.42 ansible_user=root</span><br><span class="line">node2 ansible_host=10.128.0.43 ansible_user=root</span><br></pre></td></tr></table></figure></li><li><p>ping 명령어를 통해 연결상태를 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -m ping all -i hosts</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/28/7.png" alt=""></p></li></ul><h1 id="3-Ansible을-이용해-k8s-클러스터-구성해보기"><a href="#3-Ansible을-이용해-k8s-클러스터-구성해보기" class="headerlink" title="3. Ansible을 이용해 k8s 클러스터 구성해보기"></a>3. Ansible을 이용해 k8s 클러스터 구성해보기</h1><h3 id="3-1-setup-yml-작성"><a href="#3-1-setup-yml-작성" class="headerlink" title="3.1 setup.yml 작성"></a>3.1 setup.yml 작성</h3><p><code>master</code> <code>nodes</code> 에 공통으로 설정할 내용과 k8s 설치용 playbook 파일을 작성합니다.<br><a href="https://raw.githubusercontent.com/thinkub/ansible-k8s-cluster/master/setup.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/thinkub/ansible-k8s-cluster/master/setup.yml</a></p><h3 id="3-2-playbook-실행-shell-script-작성"><a href="#3-2-playbook-실행-shell-script-작성" class="headerlink" title="3.2 playbook 실행 shell script 작성"></a>3.2 playbook 실행 shell script 작성</h3><p>작성한 playbook 용 yaml 파일을 실행할 shell script 를 작성합니다.<br><a href="https://raw.githubusercontent.com/thinkub/ansible-k8s-cluster/master/build-cluster.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/thinkub/ansible-k8s-cluster/master/build-cluster.sh</a></p><h3 id="3-3-실행"><a href="#3-3-실행" class="headerlink" title="3.3 실행"></a>3.3 실행</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-cluster.sh</span><br></pre></td></tr></table></figure><h3 id="3-4-결과"><a href="#3-4-결과" class="headerlink" title="3.4 결과"></a>3.4 결과</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TASK [add Kubernetes YUM repository] ***************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line">changed: [node1]</span><br><span class="line">changed: [node2]</span><br><span class="line"></span><br><span class="line">TASK [install kubelet] ******************************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line">changed: [node1]</span><br><span class="line">changed: [node2]</span><br><span class="line"></span><br><span class="line">TASK [install kubeadm] ******************************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line">changed: [node1]</span><br><span class="line">changed: [node2]</span><br><span class="line"></span><br><span class="line">TASK [start kubelet] ********************************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line">changed: [node1]</span><br><span class="line">changed: [node2]</span><br><span class="line"></span><br><span class="line">TASK [install kubectl] ******************************************************************************************</span><br><span class="line">ok: [master]</span><br><span class="line">ok: [node1]</span><br><span class="line">ok: [node2]</span><br><span class="line"></span><br><span class="line">PLAY [master] ***************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [master]</span><br><span class="line"></span><br><span class="line">TASK [initialize the cluster] ***********************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line"></span><br><span class="line">TASK [create .kube directory] ***********************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line"></span><br><span class="line">TASK [copy admin.conf to user kube config] ********************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line"></span><br><span class="line">TASK [install Pod network] **************************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line"></span><br><span class="line">PLAY [master] ***************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [get join <span class="built_in">command</span>] *****************************************************************************************</span><br><span class="line">changed: [master]</span><br><span class="line"></span><br><span class="line">TASK [<span class="built_in">set</span> join <span class="built_in">command</span>] *****************************************************************************************</span><br><span class="line">ok: [master]</span><br><span class="line"></span><br><span class="line">PLAY [nodes] ****************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************</span><br><span class="line">ok: [node1]</span><br><span class="line">ok: [node2]</span><br><span class="line"></span><br><span class="line">TASK [join cluster] *********************************************************************************************</span><br><span class="line">changed: [node1]</span><br><span class="line">changed: [node2]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************</span><br><span class="line">master                     : ok=21   changed=16   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">node1                      : ok=16   changed=12   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   </span><br><span class="line">node2                      : ok=16   changed=12   unreachable=0    failed=0    skipped=1    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><ul><li>master 에서 cluster 확인하기<br><img src="/img/2020/02/28/8.png" alt=""></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://zerobig-k8s.tistory.com/31" target="_blank" rel="noopener">https://zerobig-k8s.tistory.com/31</a><br><a href="https://github.com/zer0big/ansible-k8s-cluster" target="_blank" rel="noopener">https://github.com/zer0big/ansible-k8s-cluster</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Provisioning - 2. Ansible</title>
    <link href="http://yoursite.com/2020/02/28/Provisioning%20-%202.%20Ansible/"/>
    <id>http://yoursite.com/2020/02/28/Provisioning%20-%202.%20Ansible/</id>
    <published>2020-02-28T00:18:58.751Z</published>
    <updated>2020-02-28T00:33:11.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h1><p><img src="/img/2020/02/28/1.png" alt=""></p><p>Ansible은 오픈 소스 소프트웨어 프로비저닝, 구성 관리, 애플리케이션 전개 도구입니다. 수많은 유닉스 계열 시스템에서 실행되며 유닉스 계열 운영 체제 및 마이크로소프트 윈도우의 구성이 가능합니다. 시스템 구성을 기술하기 위해 자체 선언형 언어를 포함하고 있습니다.<br>python으로 개발되고 <strong>YAML</strong> 언어를 통해 정의하며 json으로 통신합니다. (python Github project 중 상위 6위) </p><p><strong>IaC (Infrastructure as a Code)</strong> 라는 개념에서 나온 기술로 여러대의 서버를 효율적으로 관리하기 위해 만들어진 자동화 툴입니다.</p><h3 id="1-Ansible-특징"><a href="#1-Ansible-특징" class="headerlink" title="1. Ansible 특징"></a>1. Ansible 특징</h3><ul><li>SSH 통신, 빠른 provision 이 가능합니다.</li><li>추후 상용 환경에서 사용할 때 agent 기반이면 방화벽 이슈, agent 데몬 관리라는 불편한 점이 존재합니다. (agent 방식의 장점도 물론 존재합니다. 확장성, 대규모 provision을 할 경우 매우 효과적입니다. 대신 서버와 통신하는 부분이 고도화되기 때문에 빠르고 간단한 provision을 할 수 없습니다.</li><li>자동 배포 환경이 쉽습니다.</li><li>개발 가능성이 높은 오픈소스 입니다.</li><li>멱등성을 제공합니다.</li><li>대상 서버에 별도 에이전트를 설치 하지 않아도 됩니다. </li><li>설정 파일은 YAML 형식으로 가독성이 좋습니다.</li><li>700개 이상 대다수의 서버와 네트워크 장비를 지원합니다.</li></ul><h3 id="2-Ansible-구성요소"><a href="#2-Ansible-구성요소" class="headerlink" title="2. Ansible 구성요소"></a>2. Ansible 구성요소</h3><p>Ansible에는 크게 3가지 요소가 있습니다. Inventory, playbook, module 입니다. 간단히 말해서 <strong>어디서(Inventory)</strong>, <strong>무엇을(playbook)</strong>, <strong>어떻게(module)</strong> 수행할 지를 정의합니다.<br>module은 playbook이 정의된 파일 내부에서 사용됩니다.</p><h4 id="2-1-Inventory"><a href="#2-1-Inventory" class="headerlink" title="2.1 Inventory"></a>2.1 Inventory</h4><p>배포 대상을 정리한 파일입니다. 간단히 말해 host ip와 접근방식등을 기록해 놓은 파일입니다. yaml문법을 적용하지 않았고 기본파일은 <strong>/etc/ansible/hosts</strong> 를 읽게 하거나, 따로 inventory 파일을 만들고 옵션을 주어 동작하게 할 수 있습니다. </p><ul><li>ex)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">master ansible_host=10.128.0.37 ansible_user=root</span><br><span class="line"></span><br><span class="line">[workers]</span><br><span class="line">worker1 ansible_host=10.128.0.38 ansible_user=root</span><br><span class="line">worker2 ansible_host=10.128.0.39 ansible_user=root</span><br></pre></td></tr></table></figure><h4 id="2-2-ad-hoc"><a href="#2-2-ad-hoc" class="headerlink" title="2.2 ad-hoc"></a>2.2 ad-hoc</h4>임시적으로 수행하는 의미로 ansible의 playbook을 작성하여 수행하는 것이 아니라 임시적으로 작업을 수행하는 방법입니다.</li></ul><h4 id="2-3-playbook"><a href="#2-3-playbook" class="headerlink" title="2.3 playbook"></a>2.3 playbook</h4><p>다수의 서버에 대한 배포시스템의 기본 단위입니다. Inventory에 작성된 서버들을 대상으로 실행 스크립트를 정의한 파일입니다. YAML 문법을사용합니다.</p><ul><li>ex<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">Docker</span></span><br><span class="line">     <span class="attr">yum:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">docker</span></span><br><span class="line">       <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">       <span class="attr">update_cache:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">Docker</span></span><br><span class="line">     <span class="attr">service:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">docker</span></span><br><span class="line">       <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line">       <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">       </span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Stop</span> <span class="string">and</span> <span class="string">disable</span> <span class="string">firewalld.</span></span><br><span class="line">     <span class="attr">service:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">firewalld</span></span><br><span class="line">       <span class="attr">state:</span> <span class="string">stopped</span></span><br><span class="line">       <span class="attr">enabled:</span> <span class="literal">False</span>       </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://www.ansible.com/" target="_blank" rel="noopener">https://www.ansible.com/</a><br><a href="https://ko.wikipedia.org/wiki/Ansible" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/Ansible</a><br><a href="https://brownbears.tistory.com/358" target="_blank" rel="noopener">https://brownbears.tistory.com/358</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Provisioning - 1. Provisioning</title>
    <link href="http://yoursite.com/2020/02/28/Provisioning%20-%201.%20Provisioning/"/>
    <id>http://yoursite.com/2020/02/28/Provisioning%20-%201.%20Provisioning/</id>
    <published>2020-02-28T00:13:18.692Z</published>
    <updated>2020-02-28T00:33:11.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>지금까지 Docker와 Container Orchestration 인 Kubernetes 에 대해서 알아봤습니다.<br>k8s를 사용하기 위해서는 결국 Master / Node에 k8s를 사용하기 위한 설정들을 미리 해둬야합니다.<br><strong>이러한 설정들을 서버가 증설 되거나 또 다른 프로젝트에 대한 배포환경을 만들때 마다 반복한다면 꽤 불편할 거라 생각됩니다.</strong></p><h1 id="1-Provisioning-프로비저닝-이란"><a href="#1-Provisioning-프로비저닝-이란" class="headerlink" title="1. Provisioning (프로비저닝) 이란?"></a>1. Provisioning (프로비저닝) 이란?</h1><p>프로비저닝은 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 <strong>필요 시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것</strong>을 말합니다. </p><p>여러 프로비저닝 오픈소스중 저희는 <strong>Ansible (앤서블)</strong> 에 대해 알아볼 예정입니다.<br>목표는 <strong>Ansible</strong>을 이용해 k8s의 Master, Node 의 환경구성 자동화를 진행해 보겠습니다.</p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9D" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9D</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Container Orchestration - 7. kubectl CLI</title>
    <link href="http://yoursite.com/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/"/>
    <id>http://yoursite.com/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/</id>
    <published>2020-02-26T06:06:40.736Z</published>
    <updated>2020-02-28T00:33:00.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>쿠버네티스는 클러스터 API 서버와 통신하기 위해 <code>kubectl</code>이라는 커맨드라인 인터페이스를 사용합니다. 클러스터와 상호 작용하고 바라는 상태를 설정하거나 수정하기 위해서 쿠버네티스 API를 직접 사용할 수도 있습니다. </p><h1 id="1-Syntax"><a href="#1-Syntax" class="headerlink" title="1. Syntax"></a>1. Syntax</h1><p>kubectl의 기본 구분은 다음과 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl [<span class="built_in">command</span>] [TYPE] [NAME] [flag]</span><br></pre></td></tr></table></figure><ul><li><p><strong>command</strong></p><ul><li>create, get, describe, delete 등 자원에 대해 수행하려는 조작을 지정합니다.</li></ul></li><li><p><strong>TYPE</strong></p><ul><li>리소스에 대한 유형을 지정하며, 대소 문자를 구분하지 않으나, 단수, 복수, 약식을 지정할 수 있습니다.</li><li>다음 예시는 모두 같은 출력을 실행합니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod pod1</span><br><span class="line">kubectl get pods pod1</span><br><span class="line">kubectl get po pod1</span><br></pre></td></tr></table></figure><img src="/img/2020/02/26/44.png" alt=""></li></ul></li><li><p><strong>NAME</strong></p><ul><li>리소스의 이름을 지정합니다. 이름은 대소 문자를 구분합니다. 이름을 생략하면 모든 리소스에 대한 세부 정보가 표시됩니다<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><img src="/img/2020/02/26/45.png" alt=""></li><li>여러 리소스에 대한 조작을 수행 할 때 유형 및 이름별로 각 리소스를 지정하거나 하나 이상의 파일을 지정할 수 있습니다.<ul><li>리소스가 모두 같은 유형인 경우 <strong>TYPE NAME1 NAME2 NAME3 …</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod pod1 pod2 pod3 ...</span><br></pre></td></tr></table></figure></li><li>여러 리소스 유형을 개별적으로 지정하는경우 <strong>TYPE1/NAME1 TYPE1/NAME2 TYPE2/NAME3 …</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod/pod1 pod/pod2 service/service1 ...</span><br></pre></td></tr></table></figure></li></ul></li><li>하나 이상의 파일로 리소스를 지정 <strong>-f file1 -f file2 -f file</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -f ./pod.yaml</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>flag</strong></p><ul><li>선택적 플래그를 지정합니다. 예를 들어, -s 또는 –server 플래그를 사용하여 Kubernetes API 서버의 주소와 포트를 지정할 수 있습니다.</li></ul></li></ul><h1 id="2-Operations"><a href="#2-Operations" class="headerlink" title="2. Operations"></a>2. Operations</h1><p>다음 표에는 모든 kubectl 작업에 대한 간단한 설명과 일반적인 구문이 포함되어 있습니다.<br><br>자세한 사항은 <a href="https://kubernetes.io/docs/reference/kubectl/kubectl/" target="_blank" rel="noopener">이곳</a> 을 참고해주세요.</p><table><thead><tr><th>Operation</th><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>annotate</td><td>kubectl annotate (-f FILENAME | TYPE NAME | TYPE/NAME) KEY_1=VAL_1 … KEY_N=VAL_N [–overwrite] [–all] [–resource-version=version] [flags]</td><td>하나 이상의 리소스 주석을 추가하거나 업데이트</td></tr><tr><td>api-versions</td><td>kubectl api-versions [flags]</td><td>사용가능한 API 버전 List</td></tr><tr><td>apply</td><td>kubectl apply -f FILENAME [flags]</td><td>파일 또는 stdin에서 자원에 구성 변경 사항을 적용</td></tr><tr><td>attach</td><td>kubectl attach POD -c CONTAINER [-i] [-t] [flags]</td><td>실행중인 컨테이너에 연결하여 출력 스트림을 보거나 컨테이너 (stdin)와 상호 작용하십시오.</td></tr><tr><td>autoscale</td><td>kubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [–min=MINPODS] –max=MAXPODS [–cpu-percent=CPU] [flags]</td><td>복제 컨트롤러에서 관리하는 포드 세트를 자동으로 조정합니다.</td></tr><tr><td>cluster-info</td><td>kubectl cluster-info [flags]</td><td>클러스터의 마스터 및 서비스에 대한 엔드 포인트 정보를 표시하십시오.</td></tr><tr><td>config</td><td>kubectl config SUBCOMMAND [flags]</td><td>kubeconfig 파일을 수정합니다. 세부 사항은 개별 부속 명령을 참조하십시오.</td></tr><tr><td>create</td><td>kubectl create -f FILENAME [flags]</td><td>파일 또는 stdin에서 하나 이상의 자원을 작성하십시오.</td></tr><tr><td>delete</td><td>kubectl delete (-f FILENAME | TYPE [NAME | /NAME | -l label | –all]) [flags]</td><td>파일, stdin에서 또는 label selectors, names, resource selectors 또는 resources 지정하여 resources를 삭제하십시오.</td></tr><tr><td>describe</td><td>kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | /NAME | -l label]) [flags]</td><td>하나 이상의 리소스의 자세한 상태를 표시합니다.</td></tr><tr><td>diff</td><td>kubectl diff -f FILENAME [flags]</td><td>라이브 구성에 대한 Diff 파일 또는 표준 입력 (BETA)</td></tr><tr><td>edit</td><td>kubectl edit (-f FILENAME | TYPE NAME | TYPE/NAME) [flags]</td><td>기본 편집기를 사용하여 서버에서 하나 이상의 자원 정의를 편집하고 업데이트하십시오.</td></tr><tr><td>exec</td><td>kubectl exec POD [-c CONTAINER] [-i] [-t] [flags] [– COMMAND [args…]]</td><td>pod의 컨테이너에 대해 명령을 실행하십시오.</td></tr><tr><td>explain</td><td>kubectl explain [–recursive=false] [flags]</td><td>다양한 리소스에 대한 설명서를 받으십시오. pods, nodes, services 등</td></tr><tr><td>expose</td><td>kubectl expose (-f FILENAME | TYPE NAME | TYPE/NAME) [–port=port] [–protocol=TCP|UDP] [–target-port=number-or-name] [–name=name] [–external-ip=external-ip-of-service] [–type=type] [flags]</td><td>replication controller, service 또는 pod를 새로운 Kubernetes 서비스로 노출하십시오.</td></tr><tr><td>get</td><td>kubectl get (-f FILENAME | TYPE [NAME | /NAME | -l label]) [–watch] [–sort-by=FIELD] [[-o | –output]=OUTPUT_FORMAT] [flags]</td><td>하나 이상의 리소스를 나열하십시오.</td></tr><tr><td>label</td><td>kubectl label (-f FILENAME | TYPE NAME | TYPE/NAME) KEY_1=VAL_1 … KEY_N=VAL_N [–overwrite] [–all] [–resource-version=version] [flags]</td><td>하나 이상의 리소스 레이블 추가 또는 업데이트</td></tr><tr><td>logs</td><td>kubectl logs POD [-c CONTAINER] [–follow] [flags]</td><td>컨테이너 내부의 pod log를 출력합니다.</td></tr><tr><td>patch</td><td>kubectl patch (-f FILENAME | TYPE NAME | TYPE/NAME) –patch PATCH [flags]</td><td>전략적 병합 패치 프로세스를 사용하여 리소스의 하나 이상의 필드를 업데이트하십시오.</td></tr><tr><td>port-forward</td><td>kubectl port-forward POD [LOCAL_PORT:]REMOTE_PORT […[LOCAL_PORT_N:]REMOTE_PORT_N] [flags]</td><td>하나 이상의 로컬 포트를 pod로 전달합니다.</td></tr><tr><td>proxy</td><td>kubectl proxy [–port=PORT] [–www=static-dir] [–www-prefix=prefix] [–api-prefix=prefix] [flags]</td><td>Kubernetes API 서버에 프록시를 실행하십시오.</td></tr><tr><td>replace</td><td>kubectl replace -f FILENAME</td><td>파일 또는 stdin에서 리소스를 바꾸십시오.</td></tr><tr><td>rolling-update</td><td>kubectl rolling-update OLD_CONTROLLER_NAME ([NEW_CONTROLLER_NAME] –image=NEW_CONTAINER_IMAGE | -f NEW_CONTROLLER_SPEC) [flags]</td><td>지정된 replication controller 및 해당 pod를 점차적으로 교체하여 rolling update를 수행하십시오.</td></tr><tr><td>run</td><td>kubectl run NAME –image=image [–env=”key=value”] [–port=port] [–replicas=replicas] [–dry-run=bool] [–overrides=inline-json] [flags]</td><td>클러스터에서 지정된 이미지를 실행하십시오.</td></tr><tr><td>scale</td><td>kubectl scale (-f FILENAME | TYPE NAME | TYPE/NAME) –replicas=COUNT [–resource-version=version] [–current-replicas=count] [flags]</td><td>지정된 replacation controller의 크기를 업데이트하십시오.</td></tr><tr><td>version</td><td>kubectl version [–client] [flags]</td><td>클라이언트와 서버에서 실행중인 Kubernetes 버전을 표시합니다.</td></tr></tbody></table><h1 id="3-Resource-types"><a href="#3-Resource-types" class="headerlink" title="3. Resource types"></a>3. Resource types</h1><table><thead><tr><th>Resource Name</th><th>ShortNames</th><th>API Group</th><th>Namespaced</th><th>Resource kind</th></tr></thead><tbody><tr><td>bindings</td><td></td><td></td><td>true</td><td>Binding</td></tr><tr><td>componentstatuses</td><td>cs</td><td></td><td>false</td><td>ComponentStatus</td></tr><tr><td>configmaps</td><td>cm</td><td></td><td>true</td><td>ConfigMap</td></tr><tr><td>endpoints</td><td>ep</td><td></td><td>true</td><td>Endpoints</td></tr><tr><td>limitranges</td><td>limits</td><td></td><td>true</td><td>LimitRange</td></tr><tr><td>namespaces</td><td>ns</td><td></td><td>false</td><td>Namespace</td></tr><tr><td>nodes</td><td>no</td><td></td><td>false</td><td>Node</td></tr><tr><td>persistentvolumeclaims</td><td>pvc</td><td></td><td>true</td><td>PersistentVolumeClaim</td></tr><tr><td>persistentvolumes</td><td>pv</td><td></td><td>false</td><td>PersistentVolume</td></tr><tr><td>pods</td><td>po</td><td></td><td>true</td><td>Pod</td></tr><tr><td>podtemplates</td><td></td><td></td><td>true</td><td>PodTemplate</td></tr><tr><td>replicationcontrollers</td><td>rc</td><td></td><td>true</td><td>ReplicationController</td></tr><tr><td>resourcequotas</td><td>quota</td><td></td><td>true</td><td>ResourceQuota</td></tr><tr><td>secrets</td><td></td><td></td><td>true</td><td>Secret</td></tr><tr><td>serviceaccounts</td><td>sa</td><td></td><td>true</td><td>ServiceAccount</td></tr><tr><td>services</td><td>svc</td><td></td><td>true</td><td>Service</td></tr><tr><td>mutatingwebhookconfigurations</td><td></td><td>admissionregistration.k8s.io</td><td>false</td><td>MutatingWebhookConfiguration</td></tr><tr><td>validatingwebhookconfigurations</td><td></td><td>admissionregistration.k8s.io</td><td>false</td><td>ValidatingWebhookConfiguration</td></tr><tr><td>customresourcedefinitions</td><td>crd, crds</td><td>apiextensions.k8s.io</td><td>false</td><td>CustomResourceDefinition</td></tr><tr><td>apiservices</td><td></td><td>apiregistration.k8s.io</td><td>false</td><td>APIService</td></tr><tr><td>controllerrevisions</td><td></td><td>apps</td><td>true</td><td>ControllerRevision</td></tr><tr><td>daemonsets</td><td>ds</td><td>apps</td><td>true</td><td>DaemonSet</td></tr><tr><td>deployments</td><td>deploy</td><td>apps</td><td>true</td><td>Deployment</td></tr><tr><td>replicasets</td><td>rs</td><td>apps</td><td>true</td><td>ReplicaSet</td></tr><tr><td>statefulsets</td><td>sts</td><td>apps</td><td>true</td><td>StatefulSet</td></tr><tr><td>tokenreviews</td><td></td><td>authentication.k8s.io</td><td>false</td><td>TokenReview</td></tr><tr><td>localsubjectaccessreviews</td><td></td><td>authorization.k8s.io</td><td>true</td><td>LocalSubjectAccessReview</td></tr><tr><td>selfsubjectaccessreviews</td><td></td><td>authorization.k8s.io</td><td>false</td><td>SelfSubjectAccessReview</td></tr><tr><td>selfsubjectrulesreviews</td><td></td><td>authorization.k8s.io</td><td>false</td><td>SelfSubjectRulesReview</td></tr><tr><td>subjectaccessreviews</td><td></td><td>authorization.k8s.io</td><td>false</td><td>SubjectAccessReview</td></tr><tr><td>horizontalpodautoscalers</td><td>hpa</td><td>autoscaling</td><td>true</td><td>HorizontalPodAutoscaler</td></tr><tr><td>cronjobs</td><td>cj</td><td>batch</td><td>true</td><td>CronJob</td></tr><tr><td>jobs</td><td></td><td>batch</td><td>true</td><td>Job</td></tr><tr><td>certificatesigningrequests</td><td>csr</td><td>certificates.k8s.io</td><td>false</td><td>CertificateSigningRequest</td></tr><tr><td>leases</td><td></td><td>coordination.k8s.io</td><td>true</td><td>Lease</td></tr><tr><td>events</td><td>ev</td><td>events.k8s.io</td><td>true</td><td>Event</td></tr><tr><td>ingresses</td><td>ing</td><td>extensions</td><td>true</td><td>Ingress</td></tr><tr><td>networkpolicies</td><td>netpol</td><td>networking.k8s.io</td><td>true</td><td>NetworkPolicy</td></tr><tr><td>poddisruptionbudgets</td><td>pdb</td><td>policy</td><td>true</td><td>PodDisruptionBudget</td></tr><tr><td>podsecuritypolicies</td><td>psp</td><td>policy</td><td>false</td><td>PodSecurityPolicy</td></tr><tr><td>clusterrolebindings</td><td></td><td>rbac.authorization.k8s.io</td><td>false</td><td>ClusterRoleBinding</td></tr><tr><td>clusterroles</td><td></td><td>rbac.authorization.k8s.io</td><td>false</td><td>ClusterRole</td></tr><tr><td>rolebindings</td><td></td><td>rbac.authorization.k8s.io</td><td>true</td><td>RoleBinding</td></tr><tr><td>roles</td><td></td><td>rbac.authorization.k8s.io</td><td>true</td><td>Role</td></tr><tr><td>priorityclasses</td><td>pc</td><td>scheduling.k8s.io</td><td>false</td><td>PriorityClass</td></tr><tr><td>csidrivers</td><td></td><td>storage.k8s.io</td><td>false</td><td>CSIDriver</td></tr><tr><td>csinodes</td><td></td><td>storage.k8s.io</td><td>false</td><td>CSINode</td></tr><tr><td>storageclasses</td><td>sc</td><td>storage.k8s.io</td><td>false</td><td>StorageClass</td></tr><tr><td>volumeattachments</td><td></td><td>storage.k8s.io</td><td>false</td><td>VolumeAttachment</td></tr></tbody></table><h3 id="3-1-Example"><a href="#3-1-Example" class="headerlink" title="3.1 Example"></a>3.1 Example</h3><ul><li><p>node 정보 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get no</span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/46.png" alt=""></p></li><li><p>pod 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po</span><br><span class="line">kubectl get pod</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/47.png" alt=""></p></li><li><p>service 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc</span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/48.png" alt=""></p></li><li><p>deployments 확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get deployments</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/49.png" alt=""></p></li></ul><h1 id="4-Output-Option"><a href="#4-Output-Option" class="headerlink" title="4. Output Option"></a>4. Output Option</h1><p>모든 kubectl 명령의 기본 출력 형식은 사람이 읽을 수있는 일반 텍스트 형식입니다. 특정 형식으로 터미널 창에 세부 사항을 출력하려면 지원되는 kubectl 명령에 -o 또는 –output 플래그를 추가 할 수 있습니다.</p><h3 id="4-1-Syntax"><a href="#4-1-Syntax" class="headerlink" title="4.1 Syntax"></a>4.1 Syntax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl [command] [TYPE] [NAME] -o &lt;output_format&gt;</span><br></pre></td></tr></table></figure><ul><li>kubectl 조작에 따라 다음 출력 형식이 지원됩니다.</li></ul><table><thead><tr><th>Output format</th><th>Description</th></tr></thead><tbody><tr><td>-o custom-columns=&lt;spec&gt;</td><td>쉼표로 구분 된 사용자 정의 열 목록을 사용하여 테이블을 보여줍니다.</td></tr><tr><td>-o custom-columns-file=&lt;filename&gt;</td><td>&lt;filename&gt; 파일에서 사용자 정의 열 템플리트를 사용하여 테이블을 보여줍니다.</td></tr><tr><td>-o json</td><td>JSON 형식의 API 객체를 보여줍니다.</td></tr><tr><td>-o jsonpath=&lt;template&gt;</td><td>jsonpath 표현식에 정의 된 필드를 보여줍니다.</td></tr><tr><td>-o jsonpath-file=&lt;filename&gt;</td><td>&lt;filename&gt; 파일에서 jsonpath 표현식으로 정의 된 필드를 보여줍니다.</td></tr><tr><td>-o name</td><td>리소스 이름 만 보여줍니다.</td></tr><tr><td>-o wide</td><td>추가 정보가 포함 된 일반 텍스트 형식으로 보여줍니다. pod의 경우 노드 이름이 포함됩니다.</td></tr><tr><td>-o yaml</td><td>YAML 형식의 API 객체를 보여줍니다.</td></tr></tbody></table><h3 id="4-2-Example"><a href="#4-2-Example" class="headerlink" title="4.2 Example"></a>4.2 Example</h3><ul><li>pod 세부정보를 yaml 파일로 출력하기<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod storm-684494d768-8nkm7 -o yaml</span><br></pre></td></tr></table></figure><img src="/img/2020/02/26/50.png" alt=""></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/kubectl/overview/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Container Orchestration - 6. kubenetes를 이용해 배포해보기</title>
    <link href="http://yoursite.com/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%B4%20%EB%B0%B0%ED%8F%AC%ED%95%B4%EB%B3%B4%EA%B8%B0/"/>
    <id>http://yoursite.com/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%B4%20%EB%B0%B0%ED%8F%AC%ED%95%B4%EB%B3%B4%EA%B8%B0/</id>
    <published>2020-02-26T01:19:34.291Z</published>
    <updated>2020-02-28T00:32:59.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>이번엔 k8s를 이용해서 node에 container 배포를 진행해 보겠습니다.<br>설치할 application 은 storm 입니다. </p><h1 id="1-Application-Image-생성"><a href="#1-Application-Image-생성" class="headerlink" title="1. Application Image 생성"></a>1. Application Image 생성</h1><h3 id="1-1-storm-Dockerfile"><a href="#1-1-storm-Dockerfile" class="headerlink" title="1.1 storm Dockerfile"></a>1.1 storm Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> thinkub0219@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Packages &amp; open jdk 1.9</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update -y; \</span></span><br><span class="line"><span class="bash">    yum install -y java-1.8.0-openjdk-devel.x86_64; \</span></span><br><span class="line"><span class="bash">    yum clean all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /home/sor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># source copy</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./ /home/sor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app start</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6010</span> <span class="number">6020</span> <span class="number">9999</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/sor/startup_linux</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"./startsor.sh"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"console"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="1-2-생성된-Image-저장소에-push"><a href="#1-2-생성된-Image-저장소에-push" class="headerlink" title="1.2 생성된 Image 저장소에 push"></a>1.2 생성된 Image 저장소에 push</h3><h1 id="2-Secrets-생성하기"><a href="#2-Secrets-생성하기" class="headerlink" title="2. Secrets 생성하기"></a>2. Secrets 생성하기</h1><p>private repository 를 사용하는경우 image를 pull받기 위해서는 인증 절차가 필요합니다. 그외 사용자 암호, oAuth 토큰 및 ssh키와 같은 민감한 정보를 저장하고 관리해주는 기능으로 k8s Secrets를 사용합니다. 이번 실습에서는 Docker Hub Secrets 를 생성해보도록 하겠습니다.</p><h3 id="2-1-Docker-Hub-Private-Registry-로그인"><a href="#2-1-Docker-Hub-Private-Registry-로그인" class="headerlink" title="2.1 Docker Hub Private Registry 로그인"></a>2.1 Docker Hub Private Registry 로그인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><h3 id="2-2-인증-token-정보-확인"><a href="#2-2-인증-token-정보-확인" class="headerlink" title="2.2 인증 token 정보 확인"></a>2.2 인증 token 정보 확인</h3><ul><li>login을 하게되면 <code>~/.docker/config.json</code> 파일이 생성됩니다. 파일 내용을 확인해봅니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.docker/config.json</span><br></pre></td></tr></table></figure><img src="/img/2020/02/26/32.png" alt=""></li></ul><h3 id="2-3-인증-토큰을-사용하여-Secret-생성하기"><a href="#2-3-인증-토큰을-사용하여-Secret-생성하기" class="headerlink" title="2.3 인증 토큰을 사용하여 Secret 생성하기"></a>2.3 인증 토큰을 사용하여 Secret 생성하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry &lt;name&gt; --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL --namespace=&lt;namespace-name&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/33.png" alt=""></p><h1 id="3-yaml-파일을-이용한-배포"><a href="#3-yaml-파일을-이용한-배포" class="headerlink" title="3. yaml 파일을 이용한 배포"></a>3. yaml 파일을 이용한 배포</h1><h3 id="3-1-storm배포를-위한-yaml-파일-작성"><a href="#3-1-storm배포를-위한-yaml-파일-작성" class="headerlink" title="3.1 storm배포를 위한 yaml 파일 작성"></a>3.1 storm배포를 위한 yaml 파일 작성</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">storm-dp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">storm</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">storm</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">'thinkub/storm:10.32.0.3'</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-hub</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">storm-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">storm</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">'thinkub/storm:10.32.0.3'</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">node-1</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-hub</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">storm-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">defalut</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-9999-9999</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9999</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-6010-6010</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6010</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6010</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tcp-6020-6020</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6020</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6020</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30002</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">storm</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-생성된-yaml파일로-배포-해보기"><a href="#3-2-생성된-yaml파일로-배포-해보기" class="headerlink" title="3.2 생성된 yaml파일로 배포 해보기"></a>3.2 생성된 yaml파일로 배포 해보기</h3><ul><li>아래 명령어로 yaml 파일을 통한 배포를 진행합니다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f &lt;yaml file&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/2020/02/26/34.png" alt=""></p><h3 id="3-3-App-접속-확인"><a href="#3-3-App-접속-확인" class="headerlink" title="3.3 App 접속 확인"></a>3.3 App 접속 확인</h3><ul><li>service를 조회하면 app의 접근포트인 <code>9999</code> 포트가 <code>30000</code> 으로 포트포워딩 된것을 확인 할 수 있습니다.</li><li>해당 서버의 ip / port를 이용해 정상적으로 접속되는 것을 확인 할 수 있습니다.</li></ul><p><img src="/img/2020/02/26/35.png" alt=""></p><h1 id="4-UI-를-이용한-배포"><a href="#4-UI-를-이용한-배포" class="headerlink" title="4. UI 를 이용한 배포"></a>4. UI 를 이용한 배포</h1><h3 id="4-1-우측위-버튼을-클릭합니다"><a href="#4-1-우측위-버튼을-클릭합니다" class="headerlink" title="4.1 우측위 + 버튼을 클릭합니다."></a>4.1 우측위 <code>+</code> 버튼을 클릭합니다.</h3><p><img src="/img/2020/02/26/36.png" alt=""></p><h3 id="4-2-Create-from-form-를-클릭해서-UI-배포를-진행합니다"><a href="#4-2-Create-from-form-를-클릭해서-UI-배포를-진행합니다" class="headerlink" title="4.2 Create from form 를 클릭해서 UI 배포를 진행합니다."></a>4.2 <code>Create from form</code> 를 클릭해서 UI 배포를 진행합니다.</h3><ul><li>Create from input 은 yaml 파일 형식을 직접 작성해서 배포하는 방식입니다.</li><li>Create from file 은 yaml을 upload 해서 배포하는 방식입니다.<br><img src="/img/2020/02/26/37.png" alt=""></li></ul><h3 id="4-3-App의-기본정보를-입력합니다"><a href="#4-3-App의-기본정보를-입력합니다" class="headerlink" title="4.3 App의 기본정보를 입력합니다."></a>4.3 App의 기본정보를 입력합니다.</h3><ul><li>App Name 에 배포되는 application 명칭을 작성합니다.</li><li>Container Image 에 사용하려는 Image 명칭을 작성합니다.</li><li>Number of pods 에는 생성하려는 pod의 갯수를 작성합니다.<br><img src="/img/2020/02/26/38.png" alt=""></li></ul><h3 id="4-4-Service-정보를-입력합니다"><a href="#4-4-Service-정보를-입력합니다" class="headerlink" title="4.4 Service 정보를 입력합니다."></a>4.4 Service 정보를 입력합니다.</h3><ul><li>Service 는 <code>NONE</code> <code>Internal</code> <code>External</code> 이 있습니다. 이번 실습에서는 외부에 오픈되는 App이기 때문에 External을 선택합니다.</li><li>Port 에는 application에서 사용하는 Port중 외부에 오픈되어야 하는 Port를 연결해 줍니다.<br><img src="/img/2020/02/26/39.png" alt=""></li></ul><h3 id="4-5-advance-option을-작성합니다"><a href="#4-5-advance-option을-작성합니다" class="headerlink" title="4.5 advance option을 작성합니다."></a>4.5 advance option을 작성합니다.</h3><ul><li>Show advanced option을 클릭합니다.</li><li>Description 에는 배포되는 application 의 세부 정보를 작성합니다.</li><li>Image Pull Secret는 private repository를 사용하는경우 미리 설정한 secret을 선택해서 Image pull 받을때 인증을 하게됩니다. 미리 생성한 <code>docker-hub</code> 를 선택합니다.<br><img src="/img/2020/02/26/40.png" alt=""></li></ul><h3 id="4-6-Deploy-를-클릭해서-배포를-시작합니다"><a href="#4-6-Deploy-를-클릭해서-배포를-시작합니다" class="headerlink" title="4.6 Deploy 를 클릭해서 배포를 시작합니다."></a>4.6 <code>Deploy</code> 를 클릭해서 배포를 시작합니다.</h3><p><img src="/img/2020/02/26/41.png" alt=""></p><h3 id="4-7-배포완료가-되면-초록색-으로-정상적으로-배포되었다는것을-확인-할-수-있습니다"><a href="#4-7-배포완료가-되면-초록색-으로-정상적으로-배포되었다는것을-확인-할-수-있습니다" class="headerlink" title="4.7 배포완료가 되면 초록색 으로 정상적으로 배포되었다는것을 확인 할 수 있습니다."></a>4.7 배포완료가 되면 <code>초록색</code> 으로 정상적으로 배포되었다는것을 확인 할 수 있습니다.</h3><p><img src="/img/2020/02/26/42.png" alt=""></p><h3 id="4-8-Application-접속"><a href="#4-8-Application-접속" class="headerlink" title="4.8 Application 접속"></a>4.8 Application 접속</h3><p><img src="/img/2020/02/26/43.png" alt=""></p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://kubernetes.io/ko/docs/concepts/" target="_blank" rel="noopener">https://kubernetes.io/ko/docs/concepts/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Container Orchestration - 5. kubernetes ui</title>
    <link href="http://yoursite.com/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/"/>
    <id>http://yoursite.com/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/</id>
    <published>2020-02-26T01:12:29.115Z</published>
    <updated>2020-02-28T00:32:58.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="대시보드-UI"><a href="#대시보드-UI" class="headerlink" title="대시보드 UI"></a>대시보드 UI</h1><p>대시보드는 웹 기반 쿠버네티스 유저 인터페이스입니다. 대시보드를 통해 컨테이너화 된 애플리케이션을 쿠버네티스 클러스터에 배포할 수 있고, 컨테이너화 된 애플리케이션을 트러블슈팅 할 수 있으며, 클러스터 리소스들을 관리할 수 있습니다. </p><p><img src="/img/2020/02/26/22.png" alt=""></p><h2 id="1-설치"><a href="#1-설치" class="headerlink" title="1. 설치"></a>1. 설치</h2><p>대시보드 UI는 기본으로 설치되지 않습니다. 설치하려면 다음 커맨드를 이용하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/23.png" alt=""></p><h2 id="2-설치확인"><a href="#2-설치확인" class="headerlink" title="2. 설치확인"></a>2. 설치확인</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/24.png" alt=""></p><h2 id="3-접속"><a href="#3-접속" class="headerlink" title="3. 접속"></a>3. 접속</h2><p>접속 방법은 총 3가지 입니다. </p><ul><li>Proxy를 이용하기</li><li>NodePort 이용하기</li><li>API Server 이용하기</li></ul><p><strong>여기서는 API Server를 이용해서 진행할 예정입니다.</strong></p><h3 id="3-1-API-Server-이용하기"><a href="#3-1-API-Server-이용하기" class="headerlink" title="3.1 API Server 이용하기"></a>3.1 API Server 이용하기</h3><ol><li>kube-apiserver 접근하기 위한 인증서 생성</li><li>클라이언트 브라우저에 인증서 적용하기</li></ol><ul><li><p>kube-apiserver 접근하기 위한 인증서 생성</p><ul><li>인증서 생성하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.key</span><br></pre></td></tr></table></figure></li><li>다음으로 생성한 키를 기반으로 p12 인증서 파일을 생성합니다. (<code>password는 기억해둬야 합니다.</code>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -inkey kubecfg.key -<span class="keyword">in</span> kubecfg.crt -out kubecfg.p12 -name <span class="string">"kubernetes-admin"</span></span><br></pre></td></tr></table></figure><img src="/img/2020/02/26/25.png" alt=""></li></ul></li><li><p>클라이언트 브라우저에 인증서 적용하기</p><ul><li><p>생성된 인증서 클라이언트로 Download </p></li><li><p>생성된 <code>kubecfg.p12</code> 파일과 <code>/etc/kubernetes/pki/ca.crt</code> 인증서를 사용하려는 PC에 다운받습니다.</p></li><li><p>다운로드한 인증서를 클라이언트에 적용합니다.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe -addstore "Root" D:\...\<span class="number">00</span>_Project\ca.crt</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/26.png" alt=""></p></li><li><p>p12 파일 적용시 아래와같은 인증서 설치 여부를 묻게되며 ‘예’를 선택하면 됩니다.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe -p [password] -user -importPFX D:\...\<span class="number">00</span>_Project\kubecfg.p12</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/27.png" alt=""></p></li></ul></li></ul><h2 id="4-접속확인"><a href="#4-접속확인" class="headerlink" title="4. 접속확인"></a>4. 접속확인</h2><p>ui dashboard 에 접속해 봅니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://[server_ip]:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</span><br></pre></td></tr></table></figure><ul><li><p>접근시 다음과 같이 인증서 적용 여부를 확인하게 됩니다.<br><img src="/img/2020/02/26/28.png" alt=""></p></li><li><p>dashboard 접속<br><img src="/img/2020/02/26/29.png" alt=""></p></li></ul><h3 id="4-1-Token-키-생성해서-인증하기"><a href="#4-1-Token-키-생성해서-인증하기" class="headerlink" title="4.1 Token 키 생성해서 인증하기"></a>4.1 Token 키 생성해서 인증하기</h3><ul><li><p>service 계정 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl create -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>ClusterRoleBinding<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl create -f -</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Token 가져오기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/2020/02/26/30.png" alt=""></p></li><li><p>Token 값을 이용해 인증하기<br><img src="/img/2020/02/26/31.png" alt=""></p></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://kubernetes.io/ko/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/ko/docs/tasks/access-application-cluster/web-ui-dashboard/</a><br><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a><br><a href="https://crystalcube.co.kr/199" target="_blank" rel="noopener">https://crystalcube.co.kr/199</a><br><a href="https://waspro.tistory.com/516" target="_blank" rel="noopener">https://waspro.tistory.com/516</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Container Orchestration - 4. kubernetes install</title>
    <link href="http://yoursite.com/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/"/>
    <id>http://yoursite.com/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/</id>
    <published>2020-02-26T01:08:01.268Z</published>
    <updated>2020-02-28T00:32:57.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h1 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h1><p>쿠버네틱스에 대한 개념을 살펴봤습니다. 이번엔 직접 설치해서 어떻게 작동하는지 확인해 보겠습니다.</p><p>쿠버네티스 클러스터 중 가장 쉽게 접할 수 있는 건 <a href="https://kubernetes.io/ko/docs/setup/learning-environment/minikube/" target="_blank" rel="noopener">Minikube</a> 입니다. 하지만 Minikube 는 Master 하나로 이루어져 있어 부족한 점이 많습니다. 쿠버네티스의 다양한 기능을 살펴보려면 Master 노드와 Worker 노드 여러 개로 이루어진 실제 클러스터 환경을 구성할 필요가 있습니다.</p><p>쿠버네티스 클러스터를 구성하는 것이 간단한 일은 아닙니다. 그래서 개발자들이 처음 쿠버네티스 클러스터를 구성할 때 많은 어려움을 겪습니다. 하지만 쿠버네티스에서 제공하는 kubeadm이라는 툴을 이용하면 비교적 쉽게 설치할 수 있습니다.</p><p>앞써 쿠버네티스의 <a href="https://gitlab.ziny.us/ai-labs-aip/docker/wikis/2-Container-Orchestration/2.-kubernetes(k8s)#11-master-node" target="_blank" rel="noopener">클러스터 구조</a>를 확인했습니다.<br>Pod(Container)가 실행되는 Node와 Node를 제어하는 Master가 있습니다. <code>Master 는 cpu가 최소 2core 이상이어야 합니다.</code> </p><h1 id="1-준비하기"><a href="#1-준비하기" class="headerlink" title="1. 준비하기"></a>1. 준비하기</h1><p>Master 1대와 Node 2대로 구성해서 설치 해보겠습니다. (테스트는 개인 GCP 를 사용했습니다.)</p><p><img src="/img/2020/02/26/16.png" alt=""></p><h1 id="2-Install"><a href="#2-Install" class="headerlink" title="2. Install"></a>2. Install</h1><h3 id="2-1-사전작업"><a href="#2-1-사전작업" class="headerlink" title="2.1 사전작업"></a>2.1 사전작업</h3><p><code>모든 설치 과정은 root 권한으로 진행합니다.</code><br><code>master</code> <code>node-1</code> <code>node-2</code> 공통 작업입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br></pre></td></tr></table></figure><ul><li><p>Swap 은 메모리가 부족하거나 절전 모드에서 디스크의 일부 공간을 메모리처럼 사용하는 기능입니다. Kubelet 이 정상 동작할 수 있도록 해당 기능을 swap 디바이스와 파일 모두 disable 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a                                  <span class="comment"># paging 과 swap 기능을 끕니다.</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/vm/swappiness            <span class="comment"># 커널 속성을 변경해 swap을 disable 합니다.</span></span><br><span class="line">sed -e <span class="string">'/swap/ s/^#*/#/'</span> -i /etc/fstab      <span class="comment"># Swap을 하는 파일 시스템을 찾아 disable 합니다.</span></span><br></pre></td></tr></table></figure></li><li><p>각 노드의 통신을 원활하게 하기 위해 방화벽 기능을 해제합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>SELinux(Security-Enhanced Linux)는 리눅스 보안 모듈로 액세스 권한을 제어합니다. 쿠버네티스에서는 컨테이너가 호스트의 파일시스템에 접속할 수 있도록 해당 기능을 꺼야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure></li><li><p>RHEL 과 CentOS 7에서 iptables 관련 이슈가 있어서 커널 매개변수를 다음과 같이 수정하고 적용합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></li><li><p>br_netfilter 모듈이 활성화되어 있어야 합니다. modprobe br_netfilter 명령어로 해당 모듈을 명시적으로 추가하고, lsmod | grep br_netfilter 명령어로 추가 여부를 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure></li><li><p>컨테이너 실행 환경인 도커(Docker)를 설치하고 실행합니다. 쿠버네티스는 도커 외에도 여러가지 CRI(Container Runtime Interface) 구현체를 지원하기 때문에 도커에 종속적이지 않습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-k8s-설치"><a href="#2-2-k8s-설치" class="headerlink" title="2.2 k8s 설치"></a>2.2 k8s 설치</h3><ul><li><p>Kubeadm은 Kubelet 과 Kubectl 을 설치하지 않기 때문에 직접 설치해야 합니다. 리파지토리를 추가하고 설치 및 실행합니다. Kubectl 은 클러스터에게 명령을 내리기 위한 CLI 유틸입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kube*</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li><li><p>설치 시 사용할 이미지를 먼저 다운로드 합니다. <code>master</code> 에서만 진행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images pull</span><br></pre></td></tr></table></figure></li><li><p>master 초기화를 진행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init</span><br></pre></td></tr></table></figure></li><li><p>설치 완료시 다음과 같은 로그를 확인 할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.128.0.32:6443 --token l53w07.r3jv3r9z87dberca \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:03efcec987556feb1a7e2109e814fb4b74c5bc0ba47b20b8af8ce2c28dcd20ed</span><br></pre></td></tr></table></figure></li><li><p>해당 로그의 표시된 부분을 사용해야 하니 확인해주세요</p></li></ul><p><img src="/img/2020/02/26/17.png" alt=""></p><ul><li><p>여기서 일반 사용자가 kubectl 을 사용할 수 있도록 로그 중간에 있는 명령어를 복사해서 실행합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></li><li><p>맨 마지막 라인의 명령어는 Node를 Master에 연결하는 명령어 입니다. 해당 명령어를 복사해서 <code>node-1</code> <code>node-2</code> 에서 수행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 10.128.0.32:6443 --token l53w07.r3jv3r9z87dberca \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:03efcec987556feb1a7e2109e814fb4b74c5bc0ba47b20b8af8ce2c28dcd20ed</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/2020/02/26/18.png" alt=""></p><ul><li><p>command를 복사해놓지 않고 지워진 경우에는 다음과 같이 token을 확인 할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure></li><li><p>해당 토큰은 24시간 동안만 사용할 수 있습니다. 새 토큰이 필요한 경우는 다음 명령어를 실행하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-Pod-network-add-on-설치"><a href="#2-3-Pod-network-add-on-설치" class="headerlink" title="2.3 Pod network add-on 설치"></a>2.3 Pod network add-on 설치</h3><p>Pod 은 실제로 여러 노드에 걸쳐 배포되는데, Pod 끼리는 하나의 네트워크에 있는 것처럼 통신할 수 있습니다. 이를 오버레이 네트워크(Overlay Network)라고 합니다.</p><p>오버레이 네트워크를 지원하는 CNI(Container Network Interface) 플러그인을 설치해보겠습니다. CNI 에는 여러 종류가 있는데, 이번 실습에서는 Weave 를 이용합니다.</p><ul><li><p>Master 노드에서 다음과 같이 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f <span class="string">"https://cloud.weave.works/k8s/net?k8s-version=<span class="variable">$(kubectl version | base64 | tr -d '\n')</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>첨부파일 처런 각 node들의 상태가 <code>NotReday</code> 에서 <code>Reday</code> 로 변경된 것을 확인 할 수 있습니다.</p></li></ul><p><img src="/img/2020/02/26/19.png" alt=""></p><h1 id="3-설치-확인하기"><a href="#3-설치-확인하기" class="headerlink" title="3. 설치 확인하기"></a>3. 설치 확인하기</h1><ul><li>쿠버네티스의 구성 요소가 모두 동작하는 것을 확인할 수 있습니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/2020/02/26/20.png" alt=""></p><ul><li>쿠버네티스의 구성 요소가 Pod 으로 어떤 노드에 떠있는지 확인할 수 있습니다. </li><li>etcd, API server, Scheduler, Controller Manager, DNS Server 는 master 에서 실행됩니다. </li><li>Kube proxy 와 Weave 는 각 worker 에서 실행됩니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -o custom-columns=POD:metadata.name,NODE:spec.nodeName --sort-by spec.nodeName -n kube-system</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/2020/02/26/21.png" alt=""></p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://futurecreator.github.io/2019/02/25/kubernetes-cluster-on-google-compute-engine-for-developers/" target="_blank" rel="noopener">https://futurecreator.github.io/2019/02/25/kubernetes-cluster-on-google-compute-engine-for-developers/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Container Orchestration - 3. kubernetes(2)</title>
    <link href="http://yoursite.com/2020/02/26/Container%20Orchestration%20-%203.%20kubernetes(2)/"/>
    <id>http://yoursite.com/2020/02/26/Container%20Orchestration%20-%203.%20kubernetes(2)/</id>
    <published>2020-02-26T01:05:05.438Z</published>
    <updated>2020-02-28T00:32:56.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><hr><ol><li>Docker <ol><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%201.%20Docker의%20개념/" target="_blank" rel="noopener">Docker 개념</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%202.%20Docker%20Install/" target="_blank" rel="noopener">Docker Install</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%203.%20Docker%20Command/" target="_blank" rel="noopener">Docker Command</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%204.%20Docker%20Example/" target="_blank" rel="noopener">Docker Example</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%205.%20Image%20만들기/" target="_blank" rel="noopener">Image 만들기</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%206.%20Dockerfile/" target="_blank" rel="noopener">Dockerfile</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%207.%20Docker%20Compose/" target="_blank" rel="noopener">Docker Compose</a></li><li><a href="https://thinkub.github.io/2020/02/25/Docker%20-%208.%20Image%20저장소/" target="_blank" rel="noopener">Image 저장소</a></li></ol></li></ol><hr><ol start="2"><li>Container Orchestration <ol><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%201.%20Container%20Orchestration/" target="_blank" rel="noopener">Container Orchestration 이란</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(1)/" target="_blank" rel="noopener">kubernetes(1)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%202.%20kubernetes(2)/" target="_blank" rel="noopener">kubernetes(2)</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%204.%20kubernetes%20install/" target="_blank" rel="noopener">kubernetes install</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%205.%20kubernetes%20ui/" target="_blank" rel="noopener">kubernetes ui</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%206.%20kubenetes를%20이용해%20배포해보기/" target="_blank" rel="noopener">kubernetes를 이용해 배포해보기</a></li><li><a href="https://thinkub.github.io/2020/02/26/Container%20Orchestration%20-%207.%20kubectl%20CLI/" target="_blank" rel="noopener">kubectl CLI</a></li></ol></li></ol><hr><ol start="3"><li>Provisioning <ol><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%201.%20Provisioning/" target="_blank" rel="noopener">Provisioning이란</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%202.%20Ansible/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://thinkub.github.io/2020/02/28/Provisioning%20-%203.%20Ansible을%20이용해%20kubernetes%20cluster%20생성하기/" target="_blank" rel="noopener">Ansible을 이용해 kubernetes cluster 생성하기</a></li></ol></li></ol><h2 id="3-Controller"><a href="#3-Controller" class="headerlink" title="3. Controller"></a>3. Controller</h2><p>컨트롤러는 객체가 원래 설정된 상태를 잘 유지할수있게 관리하는 역할을 합니다.</p><h3 id="3-1-Replication-Controller"><a href="#3-1-Replication-Controller" class="headerlink" title="3.1 Replication Controller"></a>3.1 Replication Controller</h3><p>언제든지 지정된 숫자 만큼의 Pod가 항상 클러스터 내에서 실행되고 있도록 관리합니다. 다시말하면 Pod 또는 동일종류의 Pod의 셋이 항상 가동되고 사용가능한지 확인합니다.</p><p><img src="/img/2020/02/26/9.svg" alt=""></p><h3 id="3-2-ReplicaSet"><a href="#3-2-ReplicaSet" class="headerlink" title="3.2 ReplicaSet"></a>3.2 ReplicaSet</h3><p>replicaset은 Replication Controller 다음 버전입니다. Replication Controller와 동일하게 동작하고 차이점은 집합 기반(set-based)의 셀렉터(selector)를 지원하는 것이 다릅니다. 복제 컨트롤러 같은 경우에는 셀렉터가 등호기반(equal-based)라서 라벨을 선택할때 같은지(=) 다른지(!=)만 확인합니다. 하지만 집합기반의 셀렉터는 in, notin, exists같은 연산자를 지원합니다.</p><p><img src="/img/2020/02/26/10.png" width="40%" height="40%"> <br></p><h3 id="3-3-Deployment"><a href="#3-3-Deployment" class="headerlink" title="3.3 Deployment"></a>3.3 Deployment</h3><p>Replication controller와 Replica Set의 좀더 상위 추상화 개념입니다. 가장 기본적인 배포 방법으로 ReplicaSet를 관리하면서 앱의 배포를 보다 세밀하게 관리할 수 있게 합니다. 단순히 실행시켜야할 pod의 개수를 유지 하는 것만이 아니라 배포할때 롤링업데이트가 가능한 것은 물론, 배포도중 멈췄다가 다시 배포하는것도 가능합니다. 배포후 이전 버전으로 롤백도 할 수 있습니다.</p><p><img src="/img/2020/02/26/11.svg" alt=""></p><h4 id="3-3-1-Rolling-Update"><a href="#3-3-1-Rolling-Update" class="headerlink" title="3.3.1 Rolling Update"></a>3.3.1 Rolling Update</h4><p>롤링 업데이트는 Pod 인스턴스를 점진적으로 새로운 것으로 업데이트하여 Deployment 업데이트가 <strong>서비스 중단 없이</strong> 이루어질 수 있도록 해줍니다.</p><p><img src="/img/2020/02/26/12.svg" width="60%" height="60%"> <br><br><img src="/img/2020/02/26/13.svg" width="60%" height="60%"> <br><br><img src="/img/2020/02/26/14.svg" width="60%" height="60%"> <br><br><img src="/img/2020/02/26/15.svg" width="60%" height="60%"> <br></p><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><blockquote><p><a href="https://kubernetes.io/ko/docs/concepts/overview/" target="_blank" rel="noopener">https://kubernetes.io/ko/docs/concepts/overview/</a><br><a href="https://subicura.com/2019/05/19/kubernetes-basic-1.html" target="_blank" rel="noopener">https://subicura.com/2019/05/19/kubernetes-basic-1.html</a><br><a href="https://bcho.tistory.com/1256?category=731548" target="_blank" rel="noopener">https://bcho.tistory.com/1256?category=731548</a><br><a href="https://arisu1000.tistory.com/" target="_blank" rel="noopener">https://arisu1000.tistory.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Index&quot;&gt;&lt;a href=&quot;#Index&quot; class=&quot;headerlink&quot; title=&quot;Index&quot;&gt;&lt;/a&gt;Index&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Docker &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://thinkub.github
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
